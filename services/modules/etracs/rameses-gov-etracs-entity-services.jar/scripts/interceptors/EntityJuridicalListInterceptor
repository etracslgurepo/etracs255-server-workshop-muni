import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*;
import com.rameses.io.*;

class EntityJuridicalListInterceptor  {

	@Service("LOVService")
	def lovSvc;

	@Env
	def env;

	@After(pattern="QueryService.getNodeList", eval="#{args[0]._schemaname == 'entityjuridical' }")
	public def afterGetNodeList(def evt) {
		def nodes = evt.result;
		nodes << [state: 'ACTIVE', title: 'ACTIVE' ];
		nodes << [state: 'INACTIVE', title: 'INACTIVE' ];		

		def orgtypes = lovSvc.getKeyValues("JURIDICAL_ORG_TYPES");
		if ( orgtypes ) {
			orgtypes = orgtypes.collect{[name:it.key, title:it.value]}
		} 

		nodes.each{ 
			it.orgtypes = orgtypes; 
		}
	}	

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'entityjuridical' }")
	public void beforeGetList( evt ) {
		def o = evt.args[0];

		def arr = resolveWhere( o ); 
		def whereList = arr[0]; 
		def whereMap = arr[1]; 

		def filterList = []; 
		def state = o.node?.state; 
		if ( state ) { 
			filterList << "state = :state"; 
			whereMap.state = state; 
		} 

		def orgtype = o.orgtype?.name; 
		if ( orgtype ) {
			filterList << "orgtype = :orgtype";
			whereMap.orgtype = orgtype; 
		}

		if ( filterList ) {
			def str = filterList.join(' AND '); 
			if ( whereList ) {
				whereList.add(0, str); 
			} else {
				whereList << str; 
			}	
		}

		if ( whereList ) { 
			o.where = [ whereList.join(' AND '), whereMap ]; 
		}
	} 

	def resolveWhere( param ) {
		def whereList = []; 
		def whereMap = [:]; 
		if ( param.where instanceof List ) { 
			if ( param.where.size() > 0 && param.where[0] ) 
				whereList << param.where[0]; 

			if ( param.where.size() > 1 && param.where[1] instanceof Map) 
				whereMap.putAll( param.where[1] ); 
		} 
		else if ( param.where instanceof Object[]) { 
			if ( param.where.length > 0 && param.where[0] ) 
				whereList << param.where[0]; 

			if ( param.where.length > 1 && param.where[1] instanceof Map) 
				whereMap.putAll( param.where[1] ); 
		}
		return [ whereList, whereMap ]; 
	}
}
