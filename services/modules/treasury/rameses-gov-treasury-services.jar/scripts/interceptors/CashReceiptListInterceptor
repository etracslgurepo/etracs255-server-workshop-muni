import com.rameses.annotations.*;

class CashReceiptListInterceptor {

	@Env 
	def env;

	@After(pattern="QueryService.getNodeList", eval="#{ args[0]._schemaname == 'cashreceipt' }")
	public void getNodes( evt ) { 
		def x = evt.args[0];
		def result = evt.result; 
		if ( x._tag == 'collector' ) {
			result << [ id:'unremitted', title: 'Unremitted'];	
			result << [ id:'delegated', title: 'Delegated'];
			result << [ id:'remitted', title: 'Remitted'];	

			if ( !x._formtype.toString().equalsIgnoreCase('cashticket')) {
				result << [ id:'voided', title: 'Voided'];	
				result << [ id:'cancelled', title: 'Cancelled'];
			}
		} 
		else if ( x._tag == 'subcollector' ) {
			result << [ id:'unremitted', title: 'Unremitted'];	
			result << [ id:'remitted', title: 'Remitted']; 

			if ( !x._formtype.toString().equalsIgnoreCase('cashticket')) {
				result << [ id:'voided', title: 'Voided'];	
				result << [ id:'cancelled', title: 'Cancelled'];
			} 
		} 
		else if( x._tag == 'unremitted' ) {
			result << [ id:'unremitted', title: 'Unremitted'];	
		}
		else if( x._tag == 'remitted' ) {
			result << [ id:'remitted', title: 'Remitted']; 
		}
		else {
			result << [ id:'unremitted', title: 'Unremitted'];	
			result << [ id:'remitted', title: 'Remitted'];	
		}
	}

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'cashreceipt' }")
	public void beforeGetList( evt ) {
		def o = evt.args[0];
		if( !o.node?.id ) return;

		def qarr = [];
		def qmap = [:];

		if ( o._tag == 'collector' ) {
			qmap.userid = env.USERID;
			qarr << " collector.objid = :userid ";

			if ( o.node.id == 'unremitted' ) { 
				qarr << " remittanceid is null AND state IN ('POSTED','CANCELLED') ";
			} else if ( o.node.id == 'delegated' ) { 
				qarr << " remittanceid is null and subcollector.objid is not null "; 
			} else if ( o.node.id == 'remitted' ) { 
				qarr << " remittanceid is not null "; 
			} else if ( o.node.id == 'voided' ) { 
				qarr << " void.objid is not null "; 
			} else if ( o.node.id == 'cancelled' ) { 
				qarr << " state = 'CANCELLED' "; 
			}
		} 
		else if ( o._tag == 'subcollector' ) {
			qmap.userid = env.USERID;
			qarr << " subcollector.objid = :userid ";

			if ( o.node.id == 'unremitted' ) {
				qarr << " subcollector.remittanceid is null AND state = 'DELEGATED' "; 
			} else if ( o.node.id == 'remitted' ) { 
				qarr << " subcollector.remittanceid is not null AND state = 'POSTED' "; 
			} else if ( o.node.id == 'voided' ) { 
				qarr << " void.objid is not null "; 
			} else if ( o.node.id == 'cancelled' ) { 
				qarr << " state = 'CANCELLED' "; 
			} 
		} 
		else if ( o.node.id == 'unremitted' ) { 
			qarr << " remittanceid IS NULL AND state = 'POSTED' "; 
		} 
		else if( o.node.id == 'remitted' ) { 
			qarr << " remittanceid IS NOT NULL "; 
		} 

		def orderbys = []; 
		if ( o.orderBy ) orderbys << o.orderBy; 

		if ( o.node?.id.toString().matches('unremitted|delegated')) {
			orderbys << " formno, receiptdate, series "; 
		} else { 
			orderbys << " receiptdate desc, receiptno desc "; 
		} 
		o.orderBy = orderbys.join(', '); 

		if( o.where ) {
			o.where[0] = qarr.join(' AND ') + " AND " + o.where[0];	
			o.where[1].putAll( qmap );
		}
		else {
			o.where = [qarr.join(' AND '), qmap];
		} 
	} 
}
