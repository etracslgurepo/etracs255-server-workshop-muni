import com.rameses.annotations.*;

class CollectionVoucherInterceptor {

	@DataContext('remittance')
	def rem_db;

	@DataContext('collectionvoucher_fund')
	def cvf_db;

	@ActiveDB('income_summary')
	def inc_db;
	
	@Service('CollectionVoucherJevService')
	def jevSvc; 


	@After(pattern="QueryService.getNodeList", eval="#{ args[0]._schemaname == 'collectionvoucher' }")
	public void afterGetNodes( evt ) { 
		def x = evt.args[0];
		def result = evt.result;
		result << [  title: 'Open', state:'OPEN' ];
		result << [  title: 'Posted', state:'POSTED' ];
	}

	@Before(pattern="QueryService.getList", eval="#{ args[0]._schemaname == 'collectionvoucher' }")
	public void beforeGetList(def evt) {
		def o = evt.args[0];

		if( !o.node?.state ) return;
		
		def str = "state = :state";
		def m = [state: o.node.state]; 

		if( o.where ) {
			o.where[0] = str + " AND " + o.where[0];	
			o.where[1].putAll( m );
		}
		else {
			o.where = [str, m];
		} 

		if ( !o.orderBy ) {
			if ( o.node.state == 'POSTED' ) {
				o.orderBy = 'controldate DESC, dtposted DESC'; 
			} else {
				o.orderBy = 'controldate, dtposted'; 
			}
		}
	} 

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'collectionvoucher' }" )
	public void beforeRemove( evt ) { 
		def param = evt.args[0]; 
		def xmap = [ collectionvoucherid: param.objid ]; 
		rem_db.find( xmap ).update([ collectionvoucherid: '{NULL}' ]); 
		cvf_db.find([ parentid: param.objid ]).delete(); 
		inc_db.clear( xmap ); 
	} 

	@After(pattern="CollectionVoucherService.post", index=-9999)
	public void afterPost( evt ) { 
		def res = evt.result; 
		if ( !res.objid ) throw new Exception('objid parameter is required');

		def m = [collectionvoucherid: res.objid]; 
		inc_db.clear( m );
		inc_db.post( m );  

		// post to JEV in async mode 
		jevSvc.postAsync([ objid: res.objid ]); 
	} 
}
