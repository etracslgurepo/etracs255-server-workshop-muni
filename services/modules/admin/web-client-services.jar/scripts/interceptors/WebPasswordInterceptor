import com.rameses.annotations.*;
import com.rameses.util.*;

class WebPasswordInterceptor 
{
	@ActiveDB(value='session', em='admin')
	def session;

	@ActiveDB(value='user', em='admin')
	def user;

	@Service('AdminPasswordService')
	def passSvc;

    @Service('Var')
    def var;

    @Env
    def env;

	@After(pattern="PasswordService.changePassword", eval="env.CLIENTTYPE=='web'") 
	public void changePassword( evt ) {
		if (!env.SESSIONID) throw new Exception('Please specify SESSIONID');

		def sessinfo = session.read([sessionid: env.SESSIONID]); 
		if (!sessinfo) throw new Exception('INVALID_SESSION');

		def params = evt.args[0];
		def username = sessinfo.username; 
		def isSA = "sa".equalsIgnoreCase(username+'');
		if (isSA) {
			changePasswordAdmin( username, params ); 
			return;
		}

		def userinfo = user.read([objid: sessinfo.userid]);
		if (!userinfo) throw new Exception('INVALID_USER_ACCOUNT'); 

		if (!params.newpassword) 
			throw new Exception('Please specify newpassword'); 
		if (!params.confirmpassword) 
			throw new Exception('Please specify confirmpassword'); 

		if (params.type == 'changepwdonlogin') { 
			/* do nothing */ 
		} else { 
			if (!params.oldpassword) 
				throw new Exception('Please specify oldpassword'); 		
			if (params.newpassword == params.oldpassword) 
				throw new Exception('New password and Old password must not be the same'); 			
		}

		if (params.newpassword != params.confirmpassword) 
			throw new Exception('New password and Confirm password must be the same'); 				

		def encoldpwd = null; 
		if (params.type == 'changepwdonlogin') { 
			encoldpwd = userinfo.pwd; 
		} else {
			encoldpwd = Encoder.MD5.encode(params.oldpassword, userinfo.username); 
			if (encoldpwd != userinfo.pwd) throw new Exception('Old password is incorrect'); 
		}
 
		def encnewpwd = Encoder.MD5.encode(params.newpassword, userinfo.username);  
		def data = [
			username 	: userinfo.username, 
			oldpassword : encoldpwd, 
			newpassword : encnewpwd 
		];
		passSvc.changePassword(data); 
	} 

	@After(pattern="PasswordService.resetPassword", eval="env.CLIENTTYPE=='web'") 
	public void resetPassword( evt ) {
		def params = evt.args[0]; 
		passSvc.resetPassword( params ); 
	} 	

	private void changePasswordAdmin( username, params ) {
		if (params.type == 'changepwdonlogin') { 
			if (!params.newpassword) 
				throw new Exception('Please specify newpassword'); 

		} else {
			if (!params.oldpassword) 
				throw new Exception('Please specify oldpassword'); 		
			if (params.newpassword == params.oldpassword) 
				throw new Exception('New password and Old password must not be the same'); 			
		}

		if (params.newpassword != params.confirmpassword) 
			throw new Exception('New password and Confirm password must be the same'); 				

		def encoldpwd = null; 
		if (params.type == 'changepwdonlogin') { 
			encoldpwd = var.sa_pwd; 
		} else {
			encoldpwd = Encoder.MD5.encode(params.oldpassword, username);  			
		}

		def encnewpwd = Encoder.MD5.encode(params.newpassword, username);  
		passSvc.changePassword([username:username, oldpassword:encoldpwd, newpassword:encnewpwd]); 
	}
}  

