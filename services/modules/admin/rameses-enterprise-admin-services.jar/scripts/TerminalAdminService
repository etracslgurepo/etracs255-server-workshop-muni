import com.rameses.annotations.*
import com.rameses.util.KeyGen;

class TerminalAdminService { 

	@DataContext('terminal') 
	def em;  

	@Service('QueryService')
	def querySvc; 

	@ProxyMethod 
	public void generateKeys( param ) {
		if ( !param.size ) throw new Exception('Please specify size');

		if ( param.size instanceof String ) { 
			param.size = Integer.parseInt( param.size ); 
		} 

		def data = [:];
		for (int i=0; i<param.size; i++) {
			data.state = 0; 
			data.terminalid = KeyGen.generateAlphanumKey( null, 10 ); 
			em.create( data ); 
			data.clear(); 			
		} 
	} 

	@ProxyMethod 
	public void unassign( param ) {
		if ( !param?.terminalid ) throw new Exception('Please specify terminalid');

		def findby = [terminalid : param.terminalid]; 
		def data = em.find( findby ).first(); 
		if ( !data ) throw new Exception("'"+param.terminalid+"' terminal not found"); 

		def newdata = [:];
		data.each{k,v-> 
			newdata[k] = '{NULL}'; 
		} 
		newdata.state = 0; 
		newdata.terminalid = param.terminalid; 
		em.find( findby ).update( newdata ); 
	} 		


	/*
		This is called by the etracs web interface due to old UI implementation
	 */
	@ProxyMethod 
	public def getList( param ) {
		param._schemaname = 'terminal'; 

		def wheres = [];
		def wheremap = [:]; 
		if ( param.where instanceof List ) {
			if ( param.where.size() > 0 ) wheres << param.where.get(0); 
			if ( param.where.size() > 1 ) wheremap.putAll( param.where.get(1)); 
		} 
		else if ( param.where instanceof Object[] ) {
			if ( param.where.length > 0 ) wheres << param.where[0]; 
			if ( param.where.length > 1 ) wheremap.putAll( param.where[1]); 
		}
		else if ( param.where instanceof String ) { 
			wheres << param.where; 
		}

		if ( param.searchtext ) {
			wheres << '( terminalid like :searchtext OR macaddress like :searchtext )'; 
			wheremap.searchtext = '%'+ param.searchtext +'%'; 
		}

		param.where = [ wheres.join(' AND '), wheremap ];
		return querySvc.getList( param ); 
	} 
}
