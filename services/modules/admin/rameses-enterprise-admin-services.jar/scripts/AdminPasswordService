import com.rameses.annotations.*;
import com.rameses.util.*;

class AdminPasswordService
{	
	@ActiveDB(value='user', em='admin')
	def user;

	@ActiveDB(value='var', em='admin')
	def var;

	@Service('DateService')
	def dateSvc;

	@ProxyMethod 
	public void changePassword( Map params ) {
		//initial validation for double checking
		if (!params.username) throw new Exception('Please specify username');
		if (!params.newpassword) throw new Exception('Please specify newpassword');
		if (!params.oldpassword) throw new Exception('Please specify oldpassword');

		def isSA = "sa".equalsIgnoreCase(params.username+'');
		if (isSA) {
			def varinfo = var.read([name:'sa_pwd']);
			if (varinfo?.value != params.oldpassword) 
				throw new Exception('Old password is invalid'); 

			varinfo.value = params.newpassword;
			var.update(varinfo); 
			var.save([name:'sa_pwd_change_on_logon', value:'0']); 
			return; 
		}
		//get pwd change cycle 
		def pwd_change_cycle = 3;
		try { 
			pwd_change_cycle = getVarValue('pwd_change_cycle').toInteger(); 
		} catch(Throwable t) {;} 

		//get pwd change date interval
		def pwd_change_date_interval = null; 
		try { 
			pwd_change_date_interval = getVarValue('pwd_change_date_interval'); 
		} catch(Throwable t) {;} 
		if (!pwd_change_date_interval) pwd_change_date_interval = '1M'; 

		def info = user.findByUsername( params );
		if (!info || info.pwd != params.oldpassword)  
			throw new Exception('Invalid username and password'); 

		//check against used passwords
		def pwds = (info.usedpwds? info.usedpwds.split(',').toList(): []);
		if (pwds.isEmpty() && info.pwd != null) pwds.add(info.pwd); 

		while (pwds.size() > pwd_change_cycle) pwds.remove(0); 

		if (pwds.contains(params.newpassword)) 
			throw new Exception('You have already used this password before. Please specify another password.'); 

		pwds.add(params.newpassword); 
		if (pwds.size() > pwd_change_cycle) pwds.remove(0); 

		info.pwdexpirydate = DateUtil.add(dateSvc.serverDate, pwd_change_date_interval);
		info.pwdlogincount = 0;
		info.pwd = params.newpassword; 
		info.usedpwds = pwds.join(','); 
		user.changePassword(info); 
	} 

	@ProxyMethod
	public void resetPassword( Map params ) {
		//initial validation for double checking
		if (!params.userid) throw new Exception('Please specify userid');
		if (!params.password) throw new Exception('Please specify password');

		def info = user.read([objid: params.userid]); 
		if (!info) throw new Exception("'"+params.userid+"' user account does not exist"); 

		info.pwd = params.password; 
		info.pwdexpirydate = null; 
		user.changePassword(info); 
	} 

	private def getVarValue( name ) {
		try { 
			def data = var.read([name: name]);
			return data['value']; 
		} catch(Throwable t) {
			return null; 
		}
	}
} 
