
import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*;
import java.io.ObjectInputStream;
import java.io.FileOutputStream;

class ForProcessNotificationTask {

    @ActiveDB(value='notification', em='notification')
    def em;

    @Service('CloudSettings') 
    def settings; 
    
	@Service('NotificationService')
	def notificationSvc;

	@Context
    def appCtx; 

	@Schedule(interval=2)
	public void execute( task ) { 
        if ( !settings.isEnabled() ) { 
            //facility is disabled, exit immediately 
            return;  
        } 

		def info = em.findMessageForProcess(); 
		if ( !info ) return; 

		def cipher = new Base64Cipher(); 
		def encstr = Encoder.MD5.encode( info.objid ); 
		def file = new File( getDataDir(), encstr ); 
		def writer = null; 
		try { 
			writer = new FileOutputStream( file ); 
			em.getContents([ parentid: info.objid ]).each{ 
				def bytes = (byte[]) cipher.decode( it.content, false ); 
				writer.write( bytes ); 
			} 
			writer.flush(); 
		} finally { 
			try{ writer.close(); }catch(Throwable t){;} 
		} 
		
		def obj = readObject( file ); 
		if ( obj instanceof AsyncRequest ) { 
			def data = em.read( info, 'async' ); 
			if ( data) { 
				//record already exist 
			} else {
				em.create( info, 'async' ); 
				em.create( info, 'async_pending' ); 
			} 
		} else { 
			def data = em.read( info ); 
			data.data = obj; 
			notificationSvc.importMessage( data );  
		} 

		em.removeForProcess( info );  
	} 

	def readObject( file ) {
		def fis = null; 
		def ois = null; 
		try {
			fis = new FileInputStream( file ); 
			ois = new ObjectInputStream( fis ); 
			return ois.readObject();   
		} finally { 
			try { ois.close(); }catch(Throwable t){;} 
			try { fis.close(); }catch(Throwable t){;} 
		} 
	}

    def getDataDir() { 
    	def datadir = appCtx.conf['notification.datadir']; 
    	if ( !datadir ) datadir = System.getProperty("java.io.tmpdir");

        def tmpdir = new File( datadir );
        def basedir = new File( tmpdir, "rameses/notification-data" );
        if ( !basedir.exists() ) { 
            basedir.mkdirs(); 
        } 
        return basedir.absoluteFile; 
    } 
} 
