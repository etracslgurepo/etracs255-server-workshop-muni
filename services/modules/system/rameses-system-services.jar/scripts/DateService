
import com.rameses.annotations.*;
import com.rameses.util.*;

class DateService {

    @SqlContext("system")
    def db;	

	@ProxyMethod(local=true)
	public String getServerDateAsString() {
		return getServerDate().toString(); 
	}

	@ProxyMethod(local=true)
	public def getServerDate() {
		def val = db.createNamedQuery("date:get-current").singleResult;
		return toSqlDate( val.dt ); 
	}

	@ProxyMethod(local=true)
	public def getBasicServerDate() {
		def val = getServerDate(); 
		return new java.sql.Date( val.getTime() );  
	} 
	
	@ProxyMethod(local=true)
	public def getServerYear() {
		def pd = parseDate( serverDate, null );
        return pd.year;
	}
	
	@ProxyMethod
	public def getServerQtr() {
		return getQtr( serverDate );
	}
	
	@ProxyMethod(local=true)
	public def getServerMonth() {
		def pd = parseDate( serverDate, null );
        return pd.month;
	}
	
	@ProxyMethod(local=true)
	public def getServerDay() {
		def pd = parseDate( serverDate, null );
        return pd.day;
	}

	@ProxyMethod(local=true)
	public def getLocaleTime( String timeZone ) {
		return getFormattedTime( serverDate, timeZone ); 
	}


	@ProxyMethod(local=true)
	public String getFormattedTime(Date d, String timezone) {
		return DateUtil.getFormattedTime(d, timezone);
	}
 
 	@ProxyMethod(local=true)
	public String format(String pattern, Object value ) { 
		def dt = resolveDate( value ); 
		if ( dt == null ) return null; 

		return new java.text.SimpleDateFormat( pattern ).format( dt );
	}
	
	@ProxyMethod(local=true)
	public def parse( String pattern, Object value ) { 
		if ( value == null ) return null; 
		else if ( value instanceof Date) { 
			return toSqlDate( value ); 
		} 

		def dt = new java.text.SimpleDateFormat( pattern ).parse( value.toString()); 
		return toSqlDate( dt );
	}
	
	@ProxyMethod(local=true)
	public def parseCurrentDate( ) {
		return parseDate( serverDate, null )
	}
    
    @ProxyMethod(local=true)
    public int getYear( dt ) {
        def pd = parseDate( dt, null )
        return pd.year 
    }
  	
	@ProxyMethod(local=true)
	public def parseDate( def value, String timezone ) { 
		def cal = Calendar.getInstance();
		cal.setTime( resolveDate( value ));

		def map = [:];
		map.month = cal.get( Calendar.MONTH ) + 1;
		map.day = cal.get( Calendar.DATE );
		map.year = cal.get( Calendar.YEAR );
		map.hour = cal.get( Calendar.HOUR_OF_DAY );
		map.minute = cal.get( Calendar.MINUTE );
		map.second = cal.get( Calendar.SECOND );
		map.millisecond = cal.get(Calendar.MILLISECOND);
		map.date  = toSqlDate( cal.getTime()); 
		map.qtr = getQtrByMonth( map.month );
		return map;
	}
	
	@ProxyMethod(local=true)
	public def getQtrByMonth( month ) {
		if( month >= 1 && month <= 3 ) return 1;
		else if( month >= 4 && month <= 6 ) return 2;
		else if( month >= 7 && month <= 9 ) return 3;
		else return 4;
	}
	
	@ProxyMethod(local=true)
	public def buildCustomTimeStamp( dt ) {
		// return a custom timestamp formatted as  YYYYQMMDD where YYYY - year, Q - quarter, MM - month, DD - day e.g, 2011-05-24 -> 201120524
		// this could be used as criteria for date based queries such as year, qtrly, monthly and daily 
		def map = parseDate(dt, null)
		return map.year + '' + map.qtr +  (map.month + '').padLeft(2, '0') + (map.day+'').padLeft(2, '0')
	}
	
	@ProxyMethod(local=true) 
	public def getCurrentTimeStamp() {
		return getTimeStamp( serverDate );
	}
	
	@ProxyMethod(local=true) 
	public def getTimeStamp(Date dt) {
		def cal = Calendar.getInstance();
		cal.setTime( dt );
		return cal.timeInMillis;
	}
	
	@ProxyMethod(local=true)
	public def add(Date d, String interval) {
		if ( d==null ) d = getServerDate();
		return toSqlDate( DateUtil.add( d, interval ));	
	}	
	
	@ProxyMethod(local=true)
	public def findNextDate(String timeInterval) {
		return toSqlDate( DateUtil.add( serverDate, timeInterval )); 
	} 
	
	@ProxyMethod(local=true)
	public def findNextFromDate( dt, String timeInterval) {
		return toSqlDate( DateUtil.add( parse('yyyy-MM-dd', dt) , timeInterval )); 
	}


	@ProxyMethod(local=true)
	public def getMonths() {
		return [
			[index:1, name:"JAN", caption:"January", qtr:1],
			[index:2, name:"FEB", caption:"February", qtr:1],
			[index:3, name:"MAR", caption:"March", qtr:1],
			[index:4, name:"APR", caption:"April", qtr:2],
			[index:5, name:"MAY", caption:"May", qtr:2],
			[index:6, name:"JUN", caption:"June", qtr:2],
			[index:7, name:"JUL", caption:"July", qtr:3],
			[index:8, name:"AUG", caption:"August", qtr:3],
			[index:9, name:"SEP", caption:"September", qtr:3],
			[index:10, name:"OCT", caption:"October", qtr:4],
			[index:11, name:"NOV", caption:"November", qtr:4],
			[index:12, name:"DEC", caption:"December", qtr:4]
		];
	}


	@ProxyMethod
    public List getMonthsByQtr( qtr ) { 
        if( ! qtr ) return getMonths()
        return getMonths().findAll{ it.qtr == qtr }
    }

	
	@ProxyMethod(local=true)
	public def getQtrs() {
		return [
			[index:1, name:"1ST", caption:"1st Quarter"],
			[index:2, name:"2ND", caption:"2nd Quarter"],
			[index:3, name:"3RD", caption:"3rd Quarter"],
			[index:4, name:"4TH", caption:"4th Quarter"]
		];
	}
    
    @ProxyMethod(local=true)
    public def getMonthEndDate( dt ) {
        def cal = Calendar.getInstance();
        cal.setTime(dt);
        int d = cal.getActualMaximum( Calendar.DAY_OF_MONTH );
        cal.set( Calendar.DAY_OF_MONTH, d );
        return toSqlDate( cal.getTime()); 
    }
    
    @ProxyMethod(local=true)
    public Date getBeginningQtrDate( int qtr, int year, int day ) {
        Calendar cal = Calendar.getInstance();
        int month = 0;
        switch(qtr) {
            case 1: month = Calendar.JANUARY; break;
            case 2: month = Calendar.APRIL; break;
            case 3: month = Calendar.JULY; break;
            default: month = Calendar.OCTOBER;
        }
        cal.set( year, month, day,  0, 0, 0  );
        return toSqlDate( cal.getTime()); 
    } 
    
    @ProxyMethod(local=true)
    public Date getQtrEndDate( int qtr, int year ) {
        def cal = Calendar.getInstance();
        int month = 0;
        switch(qtr) {
            case 1: month = Calendar.MARCH; break;
            case 2: month = Calendar.JUNE; break;
            case 3: month = Calendar.SEPTEMBER; break;
            default: month = Calendar.DECEMBER; break;
        }
        cal.set( year, month, 1, 0, 0, 0  );
        int d = cal.getActualMaximum( Calendar.DAY_OF_MONTH );
        cal.set( Calendar.DAY_OF_MONTH, d );
        return toSqlDate( cal.getTime());
    }
    
    @ProxyMethod(local=true)
    public int getQtr( Date d ) {
        def cal = Calendar.getInstance();
        cal.setTime( d );
        int month = cal.get( Calendar.MONTH );
        if( month == Calendar.JANUARY || month == Calendar.FEBRUARY || month == Calendar.MARCH ) return 1;
        if( month == Calendar.APRIL || month == Calendar.MAY || month == Calendar.JUNE ) return 2;
        if( month == Calendar.JULY || month == Calendar.AUGUST || month == Calendar.SEPTEMBER ) return 3;
        return 4;
    }
    
    @ProxyMethod(local=true)
    public def getDaysDiff(Date startDate, Date endDate ) {
        def startCal = Calendar.getInstance();
        def endCal = Calendar.getInstance();
        
        startCal.setTime(startDate);
        endCal.setTime(endDate );
        
        long startMillis = startCal.getTimeInMillis();
        long endMillis = endCal.getTimeInMillis();
        
        // Calculate no. of days using diff in milliseconds
        long diff = endMillis - startMillis;
        return (int)(diff / (24 * 60 * 60 * 1000) + 1);
    }
    
    @ProxyMethod(local=true)
    public int calculateAge( value ) {
		def dateOfBirth = resolveDate( value ); 
		def today = Calendar.getInstance();
		def birthDate = Calendar.getInstance();
	    birthDate.setTime(dateOfBirth);
	    if (birthDate.after(today)) {
	        throw new Exception("Can't be born in the future");
	    }

	    int age = 0;	    
    	age = today.get(Calendar.YEAR) - birthDate.get(Calendar.YEAR);
    	if ( (birthDate.get(Calendar.DAY_OF_YEAR) - today.get(Calendar.DAY_OF_YEAR) > 3) ||
            (birthDate.get(Calendar.MONTH) > today.get(Calendar.MONTH ))){
        	age--;
     	}
    	else if ((birthDate.get(Calendar.MONTH) == today.get(Calendar.MONTH )) &&
              (birthDate.get(Calendar.DAY_OF_MONTH) > today.get(Calendar.DAY_OF_MONTH ))){
        	age--;
    	}
		return age;
    }
    
	def YMD = new java.text.SimpleDateFormat('yyyy-MM-dd');  
	def YMDHMS = new java.text.SimpleDateFormat('yyyy-MM-dd hh:mm:ss'); 

	@ProxyMethod(local=true)
    public Date resolveDate( value ) { 
    	if ( value == null ) return null;  
    	else if ( value instanceof Date ) return value; 
    	else if ( value instanceof String) { 
    		try {
    			return new java.sql.Timestamp( YMDHMS.parse( value.toString()).time ); 
			} catch(Throwable t) {;} 
			try {
    			return new java.sql.Date( YMD.parse( value.toString()).time ); 
			} catch(Throwable t) {;} 
    	} 

    	throw new Exception('Cannot resolve date due to data type mismatch'); 
    } 

    Date toSqlDate( Date value ) { 
    	if ( value == null ) return null; 

		def cal = Calendar.getInstance();
		cal.setTime( value );

		int hour = cal.get( Calendar.HOUR_OF_DAY );
		int minute = cal.get( Calendar.MINUTE );
		int second = cal.get( Calendar.SECOND );
		int x = hour + minute + second; 
		if ( x == 0 ) {
			return new java.sql.Date( value.time); 
		} else { 
			return new java.sql.Timestamp( value.time);
		} 
    }
}
