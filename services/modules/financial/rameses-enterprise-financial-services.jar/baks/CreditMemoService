import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

public class CreditMemoService extends ActiveCrudService {
	
	@ActiveDB("creditmemo")
	def em

	@Service("DateService")
	def dateSvc 

	@Service("SequenceService")
	def seqSvc 

	@Env
	def env;

	def SCHEMA_NAME = 'creditmemo'
	def SCHEMA_ITEM = 'item'

	public void beforeCreate(o) {
		o.controlno = 'CR' + seqSvc.getNextFormattedSeries('CR');
		o.issuedby = [objid: env.USERID, name:env.FULLNAME];
		o.dtissued = dateSvc.getServerDate();
	}

	public void afterCreate( entity ) {
		entity.items.each{
			it.parentid = entity.objid 
			em.create(it, SCHEMA_ITEM)
		}	
	}

	public void afterUpdate( entity ) {
		entity.items.each{
			it.parentid = entity.objid 
			em.save(it, SCHEMA_ITEM)
		}	
	}

	public void afterOpen( entity ) {
		entity.items = em.getItems(entity)
	}	

	public void beforeRemoveEntity( entity ) {
		entity.items.each{
			em.delete(it, SCHEMA_ITEM)
		}	
	}

	@ProxyMethod
	public void removeItem( item ) {
		em.delete(item, SCHEMA_ITEM)
	}

	@ProxyMethod
	public def generateReport(params) {
		buildDateFilter( params )

		params.acctid = '%'
		if (params.account){
			params.acctid = params.account.objid
		}
		def list =  em.getReportData(params)
		if(! list) throw new Exception("No record(s) found           ")

		return list;
	}

	void buildDateFilter(params){
		if (params.qtr != null && params.month != null) {
			params.fromdate = params.year + '-' + params.month.index + '-01 00:00:00'
			params.todate   = dateSvc.format('yyyy-MM-dd', dateSvc.getMonthEndDate(dateSvc.parse('yyyy-MM-dd', params.fromdate))) + " 23:59:59"
		}
		else {
			params.fromdate = dateSvc.format('yyyy-MM-dd', dateSvc.getBeginningQtrDate( params.qtr, params.year, 1 ) ) + " 00:00:00"
			params.todate   = dateSvc.format('yyyy-MM-dd', dateSvc.getQtrEndDate( params.qtr, params.year )) + " 23:59:59"
		}
	}


	@ProxyMethod
	public def findForCashReceipt( def o ) {
		if(!o.refno) throw new Exception("refno is required");
		def m = em.findForCashReceipt(o);
		if(m.state=='POSTED')
			throw new Exception("Credit Memo is already issued!");
        m.items = em.getItems([objid: m.objid]);
        m.paymentitems = [];
        m.remarks = m.particulars;
        m.creditmemoid = m.objid;	//this is very impt. do not leave this out. used for posting
        def e = [:];
        e.reftype = 'CREDITMEMO';
        e.bank = m.bank.name;
        e.bankid = m.bank.objid;
        e.refno = m.refno;
        e.refdate = m.refdate;
        e.particulars = 'CM'+ m.refno + " dated " + m.refdate + "/" + m.particulars;
        e.account = [ objid:m.bankaccount.objid, code:m.bankaccount.code, name:m.bankaccount.title ];
        e.account.fund = [objid: m.fund.objid, name: m.fund.title ];
        e.account.bank = m.bank.name;
        e.amount = m.amount;
        //throw new Exception("e is " + e);
        m.paymentitems << e;
        return m;       
	}

}