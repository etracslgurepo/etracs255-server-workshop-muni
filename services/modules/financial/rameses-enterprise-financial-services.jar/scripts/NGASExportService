import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class NGASExportService  {

	@DataContext("liquidation_cashreceipt")
	def lcr;

	@Service("NumberService")
	def numSvc;

	@Service("DateService")
	def dtsvc;

	@Service('ReportParameterService')
	def paramSvc;

	@Env 
	def env 

	/*******************************************************************************************************
	* pass two parameters in entity
	*  entity.dtposted = date posted
	*  entity.finder = for querying example: [liquidationid: 'xxx'] or [remittanceid: 'xxx'];
	********************************************************************************************************/
	@ProxyMethod 
	def buildData( def entity ) {
		println "enter build data";
		if( !entity.dtposted ) throw new Exception("dtposted is required in NGASExportService.buildData");
		if( !entity.finder ) throw new Exception("finder is required in NGASExportService.buildData");

		def formatDate = { date, format -> 
			return new java.text.SimpleDateFormat(format).format(date); 
		}
		def sparam =  paramSvc.getStandardParameter()

		StringBuffer sb = new StringBuffer();
        sb.append("Republic of the Philippines\n");
        sb.append(sparam.LGUFORMALNAME + "\n");
        sb.append(sparam.ACCOUNTANTOFFICENAME + "\n");
        sb.append("Date : " + formatDate( entity.dtposted, 'MMM dd yyyy' ) );
        sb.append("\n\n");
		sb.append("Collector,O.R. Date,O.R. No.,Name of Payor,Particulars,Amount,Code \n");

		def list = lcr.find( entity.finder ).orderBy('receiptdate').list(); 
					 
		def vr = [:];
		def prevremittanceid = null 
		
		def append = { val, showinfo  ->
			def collectorname = ( showinfo ? val.collectorname.replaceAll(",", " ") : '')
			def receiptdate   = ( showinfo ? formatDate( val.receiptdate, 'MM/dd/yyyy' ) : '')
			def serialno      = ( showinfo ? ((val.serialno) ? val.serialno : val.afid) : '')
			def payorname     = ( showinfo ? val.payorname.replaceAll(","," ") : '')
			
			sb.append( collectorname + ',' );
			sb.append( receiptdate + ',' );
			sb.append( serialno + ',' );
			sb.append( payorname + ',' );
			if( val.voided == 0 ){
				sb.append( val.accttitle + ',' );
				sb.append( val.amount + ',' );
				sb.append( val.acctno );
			}else{
				sb.append( '*** VOID ***,' );
				sb.append( '0.0,' );
				sb.append( '***' );
			}
			sb.append( '\n' );
		}
		
		def getSerialNo = { receipt -> 
			return receipt.serialno ? receipt.serialno : receipt.afid 
		}
		
		def prevserialno = null 
		list.each{
			if( prevserialno != getSerialNo(it) ) {
				append( it, true );
				prevserialno = getSerialNo( it ) 
			}
			else {
				append( it, false );
			}
		}
		sb.append("Generated by: ETRACS 2.5\n")
		sb.append("Run Date: " + formatDate( new Date(), 'MM-dd-yyyy hh:mm:ss a' ) )
		return sb.toString();

	}



	

}