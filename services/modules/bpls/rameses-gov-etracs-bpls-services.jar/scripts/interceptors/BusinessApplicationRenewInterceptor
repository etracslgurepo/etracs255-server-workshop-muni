import com.rameses.annotations.*;
import com.rameses.util.*;

public class BusinessApplicationRenewInterceptor {

	@Env
	def env;

	@Service("BusinessApplicationWorkflowService")
	def workflowSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BusinessMasterService")
	def bizSvc;

	@Service("BusinessInfoService")
	def infoSvc;

	@Service("BusinessLobService")
	def lobSvc;

	@Service("BusinessPaymentService")
	def paySvc;

	@Service("BusinessRequirementService")
	def reqSvc;

	@Service("BusinessReceivableService")
	def receivableSvc;

	@Service("BusinessBillingService")
	def billSvc;

	@Service("BusinessRedflagService")
	def redflagSvc;

	@Service("BusinessCashReceiptService")
	def cashReceiptSvc;

	@ActiveDB('business_application') 
	def business_application;

	@ActiveDB('business_receivable') 
	def business_receivable;		

	@DataContext("business_lockid")
	def business_lockid;


	@After(pattern="BusinessApplicationService.initNew", eval="#{args[0].apptype=='RENEW' && args[0].txnmode == 'ONLINE' }")
	public void initNew(def evt) { 
		def app = evt.result;
		app.objid = "BARNW"+ new java.rmi.server.UID();

		if(!app.business.objid) throw new Exception("Please specify a business");

		//retrieve business first
        def b = bizSvc.open(app.business);
        if( b.state == 'PROCESSING') 
        		throw new Exception("An application for this business is currently being processed");

		def currentDate = dateSvc.getBasicServerDate();
		def currentYear = dateSvc.getYear( currentDate ); 		
		def currentQtr = dateSvc.getQtr( currentDate ); 
		def activeYear = b.activeyear;
		if(activeYear == currentYear) {
			if(!b.nextrenewaldate || b.nextrenewaldate.after(currentDate) ) {
				throw new Exception("Business is already renewed for current year and not yet due for renewal");
			}			
		}

		if(activeYear<(currentYear-1))
			throw new Exception("This business has delinquency for previous years. Please go to Assessor's office to process delinquency");

		if( b.state == 'CANCELLED') 
			throw new Exception("Business already cancelled");	

		if( b.state == 'RETIRED') 
			throw new Exception("Business already retired"); 

		def balinfo = business_receivable.findUnpaidBalance([ businessid: b.objid ]); 
		if ( balinfo?.balance > 0 ) {
			throw new Exception('There are still unpaid balances in the ledger. Please settle account.'); 
		} 

		//def unpaidList = receivableSvc.getReceivables( [businessid:b.objid] );		
		//if( unpaidList )
		//	throw new Exception("There are still unpaid balances in the ledger. Please settle account.");	

		//check redflag issues
		def redflags = redflagSvc.getOpenIssues( [businessid: b.objid, blockaction:'renewal']);
		if( redflags ) {
			StringBuilder sb = new StringBuilder();
			sb.append("There are unresolved issues: \n")
			redflags.each {
				sb.append( it.caseno +':'+it.message + ". filed by " + it.filedby.name + "\n");
			}
			def w =  new Warning("redflag");
			w.info.list = redflags;
			throw w;
		}
		app.appyear = b.activeyear + 1;
		app.business =  b;
        app.lobs = lobSvc.getActiveLobs([businessid:b.objid]);
        app.appinfos = infoSvc.getActiveAppInfos([businessid:b.objid]);
        app.lobs.each {
			it.assessmenttype = 'RENEW';
		}	
	}

	@Before(pattern="BusinessApplicationService.create", eval="#{args[0].apptype=='RENEW' && args[0].txnmode == 'ONLINE' }")
	public void beforeCreate(def evt) { 
		def app = evt.args[0];
		if ( !app.business?.objid ) 
			throw new Exception("'app.business.objid' parameter is required");  
		if ( !app.appyear ) 
			throw new Exception("'app.appyear' parameter is required");  


		app.requirements?.findAll{( it.step.toString() == 'info' )}.each{
			if ( !it.completed.toString().matches('true|1')) 
				throw new Exception('Please complete the '+ it.title +' requirement'); 
			if ( !it.refno ) 
				throw new Exception(''+ it.title +' requires a reference number');  
		} 


		def findby = [ objid: app.business.objid ]; 
		// initiate record locking
		business_lockid.find( findby ).update([ lockid: new java.rmi.server.UID().toString() ]); 
		// validate business record 
		def bb = business_lockid.findBusiness( findby ); 
		if ( !bb?.objid ) throw new Exception("'"+ find.objid +"' Business Master account not found"); 

		bb.state = ( bb.state ? bb.state.toString().toUpperCase() : null ); 
		if ( !bb.state.toString().matches('ACTIVE|PROCESSING') ) 
			throw new Exception("Business Master account status is not active"); 
		if ( bb.state.toString() == 'PROCESSING' ) 
			throw new Exception("An application for this business is currently being processed"); 

		if ( !bb.app?.objid ) 
			throw new Exception("Cannot locate the current application for this Business Master account"); 

        // validate application record 
		def test = business_lockid.findApp([ objid: bb.app.objid, appyear: app.appyear, apptype: 'RENEW' ]); 
		if ( test?.objid ) {
			throw new Exception('Business Renewal Application has already been created.\n Please refer to the Application No. '+ test.appno); 
		}


		def b = bizSvc.open( app.business ); 
		if ( !b.address?.objid ) b.address = app.business.address; 
		if ( !b.owner?.address?.objid ) b.owner?.address = app.business.owner?.address;

		b.mobileno = app.business.mobileno;
		b.phoneno = app.business.phoneno;
		b.email = app.business.email;
		b.permittype = app.business.permittype;
		b.apptype = 'RENEW'; 
		b.state = 'PROCESSING'; 
		b.appcount = b.appcount + 1; 
		b.permittype = (b.permittype ? b.permittype : 'BUSINESS'); 

		app.appno = b.bin +  "-" + b.appcount + "R"; 
		app.yearstarted = b.yearstarted; 
		
		bizSvc.updateOnApply( b ); 
	}

	@After(pattern="BusinessApplicationService.create", eval="#{args[0].apptype=='RENEW' && args[0].txnmode == 'ONLINE' }")
	public void afterCreate(def evt) { 
		def o = evt.result;

		//add the lobs and app infos
		def b = [businessid: o.business.objid, activeyear: o.appyear, applicationid: o.objid];
		b.lobs = o.lobs;
		b.appinfos = o.appinfos;
		b.requirements = o.requirements;

		lobSvc.addAppLobs( b );
		infoSvc.addAppInfos( b );
		reqSvc.addRequirements( b );	

		lobSvc.updateActiveLOBHistory([ businessid: o.business.objid, appyear: o.appyear ]);  

		bizSvc.updateApplicationId([businessid: o.business.objid, applicationid: o.objid]);
		o.business.currentapplicationid = o.objid;

		//start the workflow
		workflowSvc.start([refid: o.objid, data: o]);				
	}

	@After(pattern="BusinessApplicationService.cancel", eval="#{args[0].apptype=='RENEW' && args[0].txnmode == 'ONLINE' }")
	public void afterCancel(def evt) { 
		def app = evt.result;
		def b = bizSvc.open(app.business);
		b.state = 'ACTIVE';
		bizSvc.update( b );
		workflowSvc.deleteTasks([applicationid: app.objid]);
	}

	@After(pattern="BusinessApplicationService.checkReleaseStatus", eval="#{args[0].apptype=='RENEW' }")
	public void checkReleaseStatus(def evt) { 
		def o = evt.args[0];
		def result = evt.result;

		boolean canRelease = false;	
		def currentDate = dateSvc.getBasicServerDate();
		def currentYear = dateSvc.getYear( currentDate ); 		
		def currentQtr = dateSvc.getQtr( currentDate ); 
		def billing = cashReceiptSvc.getBillingForPayment([ applicationid: o.objid, _silent:true, _with_taxfees:false, _with_items:false ]);  

		if ( billing?.errcode=='NO_UNPAID') {
			canRelease = true; 
		} 
		else if ( o.appyear > currentYear ) {
			// this will only occur during early renewal period
			canRelease = true; 
		}
		else {
			def balance = 0.0; 
			for (int i=1; i<=currentQtr; i++) {
				def amt = billing?.totals?.get('q'+i); 
				balance += (amt ? amt : 0.0);  	
			}
			canRelease = (balance > 0.0 ? false : true);  
		} 

		result.canRelease = canRelease; 
	}

	@Before(pattern="BusinessApplicationService.release", eval="#{args[0].apptype=='RENEW' && args[0].state=='RELEASE' && args[0].txnmode == 'ONLINE' }")
	public void beforeRelease( evt ) { 	
		def param = evt.args[0]; 
		def xinfo = business_application.findInfoByAppid([applicationid: param.objid]);
		if ( !xinfo ) throw new Exception(param.appno + " application does not exist"); 
		if ( xinfo.state != 'RELEASE' )	
			throw new Exception('The application status has already changed. Please reload the information.'); 
	} 

	@After(pattern="BusinessApplicationService.release", eval="#{args[0].apptype=='RENEW' && args[0].state=='COMPLETED' && args[0].txnmode == 'ONLINE' }")
	public void afterRelease( evt ) { 
		def app = evt.result;
		def b = bizSvc.open(app.business);
		b.state = 'ACTIVE';
		b.activeyear = app.appyear;
		bizSvc.updateOnRelease( b );

		def bb = [ businessid: b.objid ]; 
		bb.remove_all = true;
		bb.lobs = business_application.getAppLobs([applicationid: app.objid]); 
		bb.appinfos = business_application.getAppInfos([applicationid: app.objid]); 
		bb.assessmentinfos = business_application.getAssessmentInfos([applicationid: app.objid]); 
		lobSvc.addActiveLobs( bb ); 
		infoSvc.addActiveAppInfos( bb ); 
		infoSvc.addActiveAssessmentInfos( bb ); 

		lobSvc.updateActiveLOBHistory([ businessid: b.objid, appyear: app.appyear ]);  
	}


}