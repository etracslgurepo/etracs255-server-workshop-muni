import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

public class BusinessPostPaymentService  {

	@Service("BusinessPaymentService")
	def pmtSvc;

	@Service("BusinessBillingService")
	def billingSvc;

	@Service("BusinessApplicationService")
	def appSvc;

	@Service("BusinessApplicationWorkflowService")
	def workflowSvc;

	@ProxyMethod
	public void postPayment( def a ) {
		if (a.taxfees.findAll{ !it.receivableid }) 
			throw new Exception("each item must have receivableid"); 

		//recheck the application status
		def appstate = appSvc.getStatus([objid: a.applicationid]); 
		if (!appstate.toString().toLowerCase().matches('payment|release|completed')) 
			throw new Exception("The current application status is not allowed for this transaction. Please verify."); 

		if ( !a.reftype ) throw new Exception('Please specify the reftype (receipt type)'); 

		def m = [:];
		m.objid = a.objid;
		m.businessid = a.businessid;
		m.applicationid=a.applicationid;
		m.appyear = a.appyear;
		m.refid = a.objid;
		m.reftype = a.reftype;
		m.refno = a.receiptno;
		m.refdate = a.receiptdate;
		m.amount = a.amount;
		m.remarks = a.remarks;
		m.voided = 0;
		m.taxcredit = a.totalcredit;
		if (m.taxcredit == null) m.taxcredit = 0;
		m.paymentmode = a.paymentmode;		
		m.items = [];
		a.taxfees.each {tf-> 
			if ( tf.details ) {
				tf.details.each{d-> 
					if ( d.partial == null) d.partial=0; 

					m.items << d; 
				}
			} else {
				if ( tf.partial == null) tf.partial=0; 
				if ( tf.qtr == null ) tf.qtr=0;
				m.items << tf; 
			} 
		}
		pmtSvc.create( m );
		def app = appSvc.open([ objid: m.applicationid ]);
		if (app.state == 'COMPLETED') return;

		def stat = appSvc.checkReleaseStatus([ 
			objid: m.applicationid, apptype: app.apptype, 
			txnmode: app.txnmode, appyear: app.appyear, receiptdate: a.receiptdate 
		]); 

		if ( stat.canRelease == true ) { 
			def tsk = workflowSvc.getTaskFromAppid([ applicationid: m.applicationid ]); 
			if ( tsk?.state == 'payment' ) { 
				tsk.action = 'release'; 
				tsk.data = [objid: m.applicationid, appno: app.appno, business: app.business]; 
				workflowSvc.signal( tsk ); 
			} 
		} 
	}


	@ProxyMethod
	public void postVoidPayment( def r ) {
		def pmt = pmtSvc.open([ objid: r.objid ]);
		if ( !pmt?.objid ) throw new Exception("Business payment not found");

		//check if app is completed.
		def app = appSvc.open([objid: pmt.applicationid]);
		pmtSvc.voidPayment( [objid: r.objid, voidrct: r ] );

		if (app.state != 'COMPLETED') {
			def stat = appSvc.checkReleaseStatus([ 
				objid: app.objid, apptype: app.apptype, 
				txnmode: 'ONLINE', appyear: app.appyear, receiptdate: r.receiptdate 
			]); 
			if ( stat.canRelease ) return; 

			def tsk = workflowSvc.getTaskFromAppid([applicationid: pmt.applicationid]);
			if ( tsk?.state == 'release' ) {
				tsk.action = 'revert';
				tsk.data = [objid: pmt.applicationid, appno: app.appno, business: app.business];
				workflowSvc.signal( tsk ); 
			}
		}
	}

}

