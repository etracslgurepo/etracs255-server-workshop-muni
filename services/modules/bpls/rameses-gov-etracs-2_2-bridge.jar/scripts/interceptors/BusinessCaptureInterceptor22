import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;

class BusinessCaptureInterceptor22 {
	
	@ActiveDB(value="etracs22", em="etracs22")
	def em;

	@Service("DateService")
	def dateSvc;

	@After(pattern="BusinessCaptureService.getSources")
	public def addSource(def evt) {
		def result = evt.result;
		result << [title: 'ETRACS 2.2', code:'etracs22'];
	}

	@After(pattern="BusinessCaptureService.search", eval="#{ args[0].source == 'etracs22' }")
	public def hookSearch( evt ) {
		def params = evt.args[0]; 
		params.searchlevel = 0;

		if ( params.tradename ) {
			if ( !params.ownername ) params.ownername = '%';

			params.searchlevel = 1;

		} else if ( params.ownername ) {
			params.searchlevel = 2; 

		} 

		params._pagingKeys = 'b.objid'; 
		def slist = em.getList( params );
		evt.result.addAll( slist );
	}


	@After(pattern="BusinessCaptureService.getInfo", eval="#{ args[0].source == 'etracs22' }")
	public def loadInfo(def evt) {
		def p = evt.args[0];
		def result = evt.result;
		def businessid = p.objid; 

		def binfo = em.findInfo([ objid: businessid, activeyear: p.activeyear ]); 
		if (binfo.business == null) binfo.business = [:]; 
		if (binfo.business.owner == null) binfo.business.owner = [:]; 

		if ( binfo.info ) { 
			binfo.info = em.serializer.read(binfo.info); 
		} else {
			binfo.info = [:]; 
		}
		
		binfo.business.owner.lastname = binfo.info.lastname;
		binfo.business.owner.firstname = binfo.info.firstname;
		binfo.business.owner.middlename = binfo.info.middlename;
		binfo.business.owner.birthdate = binfo.info.birthdate;
		binfo.business.owner.gender = binfo.info.gender;
		result.putAll(binfo);

		result.lobs = em.getLobs([ businessid: businessid, activeyear: binfo.activeyear ]); 
		if (result.lobs.find{ it.assessmenttype == 'RENEW' }) result.apptype = 'RENEW'; 
		else if (result.lobs.find{ it.assessmenttype == 'NEW' }) result.apptype = 'NEW'; 

		result.lobs.each { 
			it.lob = [:]; 
			it.oldlob = [objid: it.oldlobid, name: it.oldname]; 

			def nfo = em.findLob([ lobid: it.oldlob.objid ]); 
			if ( nfo?.lob ) it.lob = nfo.lob; 
		} 

		def appinfos = []; 
		em.getApplications([ businessid: businessid, activeyear: binfo.activeyear ]).each{ o-> 
			if ( o.appinfos ) {
				em.serializer.read( o.appinfos ).each{ nfo-> 
					nfo.txntype = o.txntype; 
					appinfos << nfo; 
				} 
			} 
		} 

		buildAppInfos( result, appinfos ); 
	}

	@After(pattern="BusinessCaptureService.getReceivables", eval="#{ args[0].source == 'etracs22' }")
	public void loadReceivables( evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def credits = [];
		def taxfees = []; 
		def receivables = [];	

		em.getApplications([ businessid: p.oldbusinessid, activeyear: p.activeyear ]).each{ o-> 
			if ( o.taxfees ) { 
				em.serializer.read( o.taxfees ).each{ nfo-> 
					nfo.txntype = o.txntype; 
					taxfees << nfo; 
				} 
			}
			if ( o.receivables ) {
				em.serializer.read( o.receivables ).each{ nfo-> 
					nfo.txntype = o.txntype; 
					receivables << nfo; 
				}
			}
			if ( o.credits ) { 
				em.serializer.read( o.credits ).each{ nfo-> 
					nfo.txntype = o.txntype; 
					credits << nfo; 
				}
			} 
		} 

		def lobs = p.lobs; 
		def computeBalance = { o-> 
			o.interest = 0.0;
			o.discount = 0.0;
			o.surcharge = 0.0; 
			if ( o.amtpaid > o.amount ) { 
				o.amtpaid = o.amount; 
			} 
			return (o.amount - o.amtpaid); 
		} 

		def acctMap = [:];
		def acctFinder = { acctid-> 
			if ( acctid == null ) return null;  

			if( !acctMap.containsKey(acctid)) {
				def nfo = em.findAccount([ acctid: acctid ]);
				acctMap.put( acctid, nfo );
			}
			return acctMap[ acctid ]; 
		} 

		if ( receivables ) {
			def rcvs = []; 
			receivables.groupBy{[ acctid: it.acctid, lobid: it.lobid ]}.each {k,v-> 
				def nfo = v[0]; 
				nfo.amount = v.sum{( it.amount ? it.amount : 0.0 )} 
				nfo.amtpaid = v.sum{( it.amtpaid ? it.amtpaid : 0.0 )} 
				nfo.interest = nfo.surcharge = nfo.discount = 0.0;
				nfo.total = computeBalance( nfo ); 				
				nfo.iqtr = null; 

				nfo.oldaccount = [objid: nfo.acctid, title: nfo.accttitle, code: nfo.acctno]; 
				nfo.oldlob = [objid: nfo.lobid, name: nfo.lobname]; 				
				rcvs << nfo; 
				
				def lm = lobs.find{ it.oldlob.objid==nfo.oldlob.objid } 
				if ( lm?.lob ) nfo.lob = lm.lob; 
				if ( !nfo.lob ) nfo.lob = [:]; 

				def am = acctFinder( nfo.oldaccount.objid );
				if ( am?.account ) nfo.account = am.account; 
				if ( !nfo.account ) nfo.account = [:]; 

				def tf = taxfees.find{ it.acctid==nfo.oldaccount.objid } 
				if ( tf == null ) tf = [:];  

				if ( tf.systype == 'BUSINESS_TAX' ) nfo.taxfeetype = 'TAX'; 
				else if ( tf.systype == 'REG_FEE' ) nfo.taxfeetype = 'REGFEE'; 
				else if ( tf.systype == 'OTHER_FEE' ) nfo.taxfeetype = 'OTHERCHARGE';  
				else nfo.taxfeetype = 'OTHERCHARGE'; 

				nfo.assessmenttype = (nfo.txntype=='ADDLOB' ? 'NEW' : nfo.txntype);  

				if ( nfo.taxfeetype == 'TAX' ) nfo.sortorder = 0; 
				else if ( nfo.taxfeetype == 'REGFEE' && nfo.oldlob?.objid != null ) nfo.sortorder = 1;
				else if ( nfo.taxfeetype == 'REGFEE' && nfo.oldlob?.objid == null ) nfo.sortorder = 2;  
				else if ( nfo.taxfeetype == 'OTHERCHARGE' && nfo.oldlob?.objid != null ) nfo.sortorder = 3;
				else if ( nfo.taxfeetype == 'OTHERCHARGE' && nfo.oldlob?.objid == null ) nfo.sortorder = 4; 
				else nfo.sortorder = 10;  						
			} 
			receivables.clear(); 
			receivables = rcvs.sort{ it.sortorder }; 
		} 
		
		result.receivables = receivables; 
 		result.totals = [:]; 
	} 

	@Before(pattern="BusinessApplicationService.create", eval="#{ args[0].source == 'etracs22' }")
	void beforeCreate( evt ) { 
		def app = evt.args[0]; 

		app.appinfos.findAll{( it.oldlob?.objid )}.each{ o-> 
			def nfo = app.lobs.find{ it.oldlob.objid==o.oldlob.objid } 
			if ( nfo ) {
				o.lob = [objid: nfo.lobid, name: nfo.name]; 
				o.lobid = o.lob.objid;
				o.lobname = o.lob.name; 
			}
		}

		app.assessmentinfos = []; 
		app.appinfos.findAll{ it.attribute.objid.toString().matches('GROSS|CAPITAL') }.each { o-> 
			app.assessmentinfos << o; 
		} 
		app.appinfos.removeAll( app.assessmentinfos ); 
	} 

	@After(pattern="BusinessApplicationService.create", eval="#{ args[0].source == 'etracs22' }")
	void afterCreate( evt ) {
		def r = evt.args[0];
		def result = evt.result;
		em.create( [oldbusinessid: r.oldbusinessid, businessid: result.business.objid ], "business" );

		r.lobs.each { 
			def mparams = [ 	
				oldlob_objid : it.oldlobid, 
				oldlob : [objid: it.oldlobid, name:it.oldname], 
				lob    : [objid: it.lobid, name: it.name] 
			]; 
			em.save( mparams, 'lob' ); 
		} 

		r.taxfees.each { 
			def mparams = [ 
				oldaccount_objid: it.oldaccount.objid, 
				oldaccount: it.oldaccount, 
				account: it.account  
			]; 
			em.save( mparams, 'account' ); 
		} 
	} 


	void buildAppInfos( result, appinfos ) {  
		result.appinfos = []; 
		appinfos.findAll{ it.varname=='CAPITAL' }.each{ o-> 
			def objid = 'BAI' + new UID();
			def v = [ objid: objid+'a', type: 'appinfo', decimalvalue: o.value ]; 
			v.attribute = [objid: 'DECLARED_CAPITAL', name: 'DECLARED_CAPITAL'];
			v.phase = v.level = 0;
			result.appinfos << v; 

			v = [ objid: objid+'b', type: 'assessmentinfo', decimalvalue: o.value ]; 
			v.attribute = [objid: 'CAPITAL', name: 'CAPITAL'];
			v.phase = v.level = 1;
			result.appinfos << v; 
		} 
		appinfos.findAll{ it.varname=='GROSS' }.each{ o-> 
			def objid = 'BAI' + new UID();
			def v = [ objid: objid+'a', type: 'appinfo', decimalvalue: o.value ]; 
			v.attribute = [objid: 'DECLARED_GROSS', name: 'DECLARED_GROSS'];
			v.oldlob = [objid: o.lobid, name: o.lobname]; 
			v.phase = v.level = 0;
			result.appinfos << v; 

			v = [ objid: objid+'b', type: 'assessmentinfo', decimalvalue: o.value ]; 
			v.attribute = [objid: 'GROSS', name: 'GROSS'];
			v.oldlob = [objid: o.lobid, name: o.lobname]; 			
			v.phase = v.level = 1;
			result.appinfos << v; 
		} 
		appinfos.findAll{ it.varname=='AREA_IN_SQM' }.each{ o-> 
			def objid = 'BAI' + new UID();
			def v = [ objid: objid, type: 'appinfo', decimalvalue: o.value ]; 
			v.attribute = [objid: 'AREA_SQM', name: 'AREA_SQM'];
			v.oldlob = [objid: o.lobid, name: o.lobname]; 			
			v.phase = v.level = 0;
			result.appinfos << v; 
		} 
		appinfos.findAll{ it.varname=='NO_OF_EMPLOYEE' }.each{ o-> 
			def objid = 'BAI' + new UID();
			def v = [ objid: objid, type: 'appinfo', intvalue: o.value ]; 
			v.attribute = [objid: 'NUM_EMPLOYEE', name: 'NUM_EMPLOYEE'];
			v.oldlob = [objid: o.lobid, name: o.lobname]; 			
			v.phase = v.level = 0;
			v.phase = 1; 
			result.appinfos << v; 
		} 
	} 
} 
