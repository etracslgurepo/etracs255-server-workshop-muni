import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;

class BusinessCaptureInterceptor {
	
	@ActiveDB(value="tracsdb", em="tracsdb")
	def em;

	@DataContext('tracs_lob') 
	def lob_db; 

	@DataContext('tracs_account') 
	def acct_db; 
	

	@Service("DateService")
	def dateSvc;

	@After(pattern="BusinessCaptureService.getSources")
	public def addSource(def evt) {
		def result = evt.result;
		result << [title: 'TRACS DataSource', code:'tracsds']; 
	}

	@After(pattern="BusinessCaptureService.search", eval="#{ args[0].source == 'tracsds' }")
	public def hookSearch(def evt) {
		def parms = evt.args[0];
		def result = evt.result;
		def sb = new StringBuilder();
		if ( parms.tradename ) {
			parms.tradename = parms.tradename.toString() +'%'; 
			sb.append( ''' AND  i.tradename LIKE $P{tradename} ''' );
		}
		if ( parms.ownername ) {
			parms.ownername = parms.ownername.toString() +'%'; 
			sb.append( ''' AND  i.ownername LIKE $P{ownername} ''' );	
		}	

		if ( parms.activeyear ) {
			sb.append( ''' AND  i.activeyear=$P{activeyear} ''' );	
		}

		if( sb.toString().length() == 0 ) {
			sb.append( ''' AND 1=2 ''' );
		} 
		parms.filter = sb.toString();
		parms._limit = parms._rowsize = 100; 
		def slist = em.getList( parms );
		result.addAll( slist );
	}

	@After(pattern="BusinessCaptureService.getInfo", eval="#{ args[0].source == 'tracsds' }")
	public def getInfo(def evt) {
		def p = evt.args[0];
		def result = evt.result;
		def infos = em.getInfo([ objid: p.objid ]);
		if ( infos instanceof List && infos.size() > 0 ) { 
		   result.putAll( infos.first() ); 
		} 
		else {
		   result.putAll( infos );
		}
		

		result.lobs = em.getLobs([ objid: result.applicationid ]);
	} 

	@After(pattern="BusinessCaptureService.getReceivables", eval="#{ args[0].source == 'tracsds' }")
	public def getReceivables(def evt) {
		def p = evt.args[0];
		def result = evt.result;
		result.receivables = em.getReceivables([ objid: p.applicationid ]); 
	}

	@After(pattern="BusinessApplicationService.create", eval="#{ args[0].source == 'tracsds' }")
	public def onCreateApplication(def evt) {
		def r = evt.args[0];
		def result = evt.result;
		em.create([ oldbusinessid: r.oldbusinessid, businessid:result.business.objid ], "business" );

		r.lobs.each { 
			if ( !it.oldlobid ) return; 

			def o = [ 
				oldlob_objid: it.oldlobid, 
				oldlob: [objid: it.oldlobid, name:it.oldname], 
				lob:[objid: it.lobid, name: it.name] 
			]; 
			if ( !lob_db.where('oldlob.objid = :lobid', [lobid: o.oldlob_objid]).first()) {
				lob_db.save( o ); 
			}
		} 

		r.taxfees.each { 
			if ( it.oldaccount?.objid) return;
			
			def tf = [ 
				oldaccount_objid: it.oldaccount.objid, oldaccount: it.oldaccount, 
				account: [ objid: it.account.objid,  title: it.account.title ] 
			]; 
			if ( !acct_db.where('oldaccount.objid = :acctid', [acctid: tf.oldaccount_objid]).first()) {
				acct_db.save( tf ); 
			}
		} 
	} 
} 
