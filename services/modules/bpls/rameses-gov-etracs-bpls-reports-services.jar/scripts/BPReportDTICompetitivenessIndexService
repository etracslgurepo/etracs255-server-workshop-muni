import com.rameses.annotations.*;

class BPReportDTICompetitivenessIndexService {

	@ActiveDB('bpreport_dti_competitiveness_index')
	def report_db; 

	@Service 
	def self;

    @Async
	@ProxyMethod
	public def getReport( param ) { 	
		if ( !param.permittype?.objid ) 
			throw new Exception('permit type parameter is required'); 
		if ( !param.year ) 
			throw new Exception('year parameter is required'); 

		param.templateid = param.template?.objid;
		param.permittypeid = param.permittype.objid; 
		param.daterefid = param.dateref?.objid; 

		def result = [info: [:]];
		result.reportdata = self.getReportData( param ); 
		if ( !result.reportdata ) { 
			if ( param.daterefid.toString() == 'date-released' ) {
				result.reportdata = report_db.getListByDateReleased( param ); 
			}
			else {
				result.reportdata = report_db.getListByDateApplied( param ); 
			}
		} 

		if ( !result.reportdata ) throw new Exception('No record(s) found that matches your criteria.'); 

		result.info.YEAR = param.year;
		result.info.PERIOD = buildPeriod( param ); 
		return result; 
	} 

	@ProxyMethod 
	public def getReportData( param ) {
		return [];
	}

	private def buildPeriod( param ) { 
		def periodtype = param.period?.type.toString(); 
		if ( periodtype == 'yearly' ) {
			return 'FOR THE YEAR '+ param.year; 
		}
		else if ( periodtype == 'quarterly' ) {
			def buff = new StringBuilder(); 
			buff.append('FOR THE'); 
			if ( param.qtr == 1 ) buff.append(" 1st "); 
			if ( param.qtr == 2 ) buff.append(" 2nd "); 
			if ( param.qtr == 3 ) buff.append(" 3rd "); 
			if ( param.qtr == 4 ) buff.append(" 4th "); 
			buff.append(' QUARTER OF ');
			buff.append( param.year.toString()); 
			return buff.toString(); 
		}
		else if ( periodtype == 'monthly' ) {
			def buff = new StringBuilder(); 
			buff.append('FOR THE MONTH OF ');
			buff.append( param.month?.title.toString() ).append(' '); 
			buff.append( param.year.toString()); 
			return buff.toString().toUpperCase(); 
		}
		else {
			return "";
		}
	}
} 