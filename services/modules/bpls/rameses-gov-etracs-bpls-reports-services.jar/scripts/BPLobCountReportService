import com.rameses.annotations.*;
import com.rameses.common.*;

class BPLobCountReportService { 
	
	@Service('NumberService')
	def numSvc;

    @Service('DateService') 
    def dateSvc; 	
	
	@ActiveDB("bpreport")
	def em

	@ProxyMethod
	public def getReport( params ) { 
		if ( !params.permittype?.objid ) 
			throw new Exception('permit type parameter is required'); 		

		def startdate = resolveDate( params.startdate ); 
		if ( !startdate ) throw new Exception('startdate parameter is required'); 

		def enddate = resolveDate( params.enddate );  
		if ( !enddate ) throw new Exception('enddate parameter is required'); 

		params.startdate = startdate; 
		params.enddate = resolveDate( dateSvc.add( enddate, '1d' )); 		
		params.permittypeid = params.permittype.objid; 

		if ( params.appstates ) {
			params.appstatefilter = params.appstates.findAll{( it?.objid )}.collect{"'"+ it.objid +"'"}.join(','); 
		} else {
			params.appstatefilter = "''"; 
		}

		params.filter = " AND a.state IN (" + params.appstatefilter + ")"; 
		params.filter += ''' AND b.permittype=$P{permittypeid} '''; 	

		if ( params.barangay?.objid ) { 
			params.barangayid = params.barangay.objid; 
			params.filter += ''' AND baddr.barangay_objid=$P{barangayid} ''';
		} 
		if ( params.classification?.objid ) { 
			params.classificationid = params.classification.objid; 
			params.filter += ''' AND lob.classification_objid=$P{classificationid} '''; 
		} 

		def list = em.getLOBCountList( params );
		if ( !list ) throw new Exception('No records found.');

		return list; 	
	}

	private def resolveDate( value ) { 
		if ( !value ) return null; 
		if ( value instanceof java.util.Date ) { 
			return new java.sql.Date( value.time ); 
		} 

		try { 
			def dt = java.sql.Timestamp.valueOf( value.toString() ); 
			return new java.sql.Date( dt.time );  
		} catch(Throwable t) {;} 

		try { 
			return java.sql.Date.valueOf( value.toString() ); 
		} catch(Throwable t) { 
			return null; 
		} 
	}
}