import com.rameses.annotations.*;
import com.rameses.common.*;

class BPMasterListReportService {

	@ActiveDB("bpreport")
	def em

	@Service('NumberService')
	def numSvc;

    @Service('DateService') 
    def dateSvc; 

	@ProxyMethod
	public def getReport( params ) { 
		if ( !params.permittype?.objid ) 
			throw new Exception('permit type parameter is required'); 		

		def startdate = resolveDate( params.startdate ); 
		if ( !startdate ) throw new Exception('startdate parameter is required'); 

		def enddate = resolveDate( params.enddate );  
		if ( !enddate ) throw new Exception('enddate parameter is required'); 

		params.startdate = startdate; 
		params.enddate = resolveDate( dateSvc.add( enddate, '1d' )); 
		params.permittypeid = params.permittype.objid;  

		if ( params.apptypes ) { 
			params.apptypefilter = params.apptypes.findAll{( it?.objid )}.collect{"'"+ it.objid +"'"}.join(','); 
		} else { 
			params.apptypefilter = "''";	
		}

		if ( params.appstates ) { 
			params.appstatefilter = params.appstates.findAll{( it?.objid )}.collect{"'"+ it.objid +"'"}.join(','); 
		} else { 
			params.appstatefilter = "''"; 
		} 

		def list = em.getTaxpayerMasterList( params );
		if ( !list ) throw new Exception('No record(s) found that matches your criteria.');

		def decformat = new java.text.DecimalFormat("0.00");
		list.each { 
			it.declaredcapital = round( decformat, it.declaredcapital );
			it.declaredgross = round( decformat, it.declaredgross );
			it.capital = round( decformat, it.capital );
			it.gross = round( decformat, it.gross );
			if ( it.businessaddress ) {
				it.businessaddress = it.businessaddress.toString().replaceAll("\\s"," ").trim(); 
			}
			if ( it.owner?.address ) {
				it.owner.address = it.owner.address.toString().replaceAll("\\s"," ").trim(); 
			}
		} 
		return [reportdata: list]; 
	} 

	private def round( decformat, value ) {
		if ( value instanceof Number ) {
			def str = decformat.format( value ); 
			return new java.math.BigDecimal( str ); 
 		} 
		return 0.0; 
	}

	private def resolveDate( value ) { 
		if ( !value ) return null; 
		if ( value instanceof java.util.Date ) { 
			return new java.sql.Date( value.time ); 
		} 

		try { 
			def dt = java.sql.Timestamp.valueOf( value.toString() ); 
			return new java.sql.Date( dt.time );  
		} catch(Throwable t) {;} 

		try { 
			return java.sql.Date.valueOf( value.toString() ); 
		} catch(Throwable t) { 
			return null; 
		} 
	}	
} 