import com.rameses.annotations.*;
import com.rameses.common.*;

class BPApplicationListingReportService {
	
	@Service('NumberService')
	def numSvc;
	
	@ActiveDB("bpreport")
	def em;

	@ActiveDB("bpapplication_report")
	def bpapplication_report; 

	@Service("LOVService")
    def LOV;

    @Service('DateService') 
    def dateSvc; 

    @Async
	@ProxyMethod
	public def getReport( params ) { 	
		if ( !params.permittype?.objid ) 
			throw new Exception('permit type parameter is required'); 

		def startdate = resolveDate( params.startdate ); 
		if ( !startdate ) throw new Exception('startdate parameter is required'); 

		def enddate = resolveDate( params.enddate );  
		if ( !enddate ) throw new Exception('enddate parameter is required'); 

		params.startdate = startdate; 
		params.enddate = resolveDate( dateSvc.add( enddate, '1d' )); 
		params.permittypeid = params.permittype.objid;  

		if ( params.apptypes ) {
			params.apptypefilter = params.apptypes.findAll{( it?.objid )}.collect{"'"+ it.objid +"'"}.join(','); 
		} else {
			params.apptypefilter = "''"; 
		} 

		if ( params.appstates ) {
			params.appstatefilter = params.appstates.findAll{( it?.objid )}.collect{"'"+ it.objid +"'"}.join(','); 
		} else {
			params.appstatefilter = "''"; 
		} 

		params.filter = ''; 

		if( params.barangay?.objid ) {
			params.barangayid = params.barangay.objid;
			params.filter = ''' AND addr.barangay_objid = $P{barangayid} ''';
		}
		if( params.classification?.objid ) {
			params.classificationid =  params.classification.objid;
			params.filter += ''' AND lob.classification_objid = $P{classificationid} ''';
		}
		if( params.lob?.objid ) {
			params.lobid = params.lob.objid;
			params.filter += ''' AND lob.objid = $P{lobid} ''';
		}

		def zlist = null; 
		if ( params._action.toString() == 'completed-list' ) { 
			Number nyear = params.startdate.toString().split('-')[0].toInteger(); 
			Number myear = nyear + 1; 
			params.taskstartdate = nyear.toString() +'-01-01'; 
			params.taskenddate   = myear.toString() +'-01-01'; 
			zlist = bpapplication_report.getCompletedList( params ); 
		} 
		else if ( params._action.toString() == 'permit-list' ) { 
			zlist = bpapplication_report.getPermitList( params ); 
		} 
		else { 
			zlist = bpapplication_report.getList( params ); 
		} 

		if ( zlist ) return zlist; 
		throw new Exception('No record(s) found that matches your criteria.');
	} 


	@ProxyMethod
	public def getApplicationStates() {
		return LOV.BUSINESS_APPLICATION_STATES*.key
	}

	private def resolveDate( value ) { 
		if ( !value ) return null; 
		if ( value instanceof java.util.Date ) { 
			return new java.sql.Date( value.time ); 
		} 

		try { 
			def dt = java.sql.Timestamp.valueOf( value.toString() ); 
			return new java.sql.Date( dt.time );  
		} catch(Throwable t) {;} 

		try { 
			return java.sql.Date.valueOf( value.toString() ); 
		} catch(Throwable t) { 
			return null; 
		} 
	}
}