
import com.rameses.annotations.*;
import com.rameses.common.*;

class BPPermitReportService {
	
	@ActiveDB("bppermit_report")
	def em;

	@Service('NumberService')
	def numSvc;

	@Service('DateService') 
	def dateSvc; 

	@ProxyMethod
	public def getReport( params ) { 
		if ( !params.permittype?.objid ) 
			throw new Exception('permit type parameter is required'); 

		def startdate = resolveDate( params.startdate ); 
		if ( !startdate ) throw new Exception('startdate parameter is required');  

		def enddate = resolveDate( params.enddate ); 
		if ( !enddate ) throw new Exception('enddate parameter is required');  

		enddate = dateSvc.add( enddate, '1d' ); 
		params.enddate = resolveDate( enddate ); 
		params.startdate = startdate; 
		params.permittypeid = params.permittype.objid; 		
		params.filter = ''' AND b.permittype=$P{permittypeid} '''; 	
		
		if ( params.barangay?.objid ) { 
			params.barangayid = params.barangay.objid; 
			params.filter += ''' AND addr.barangay_objid=$P{barangayid} '''; 	
		}		
		if ( params.orgtype?.objid ) { 
			params.orgtypeid = params.orgtype.objid; 
			params.filter += ''' AND b.orgtype=$P{orgtypeid} '''; 	
		} 

		params.orderbyfilter = ' ORDER BY owner_name '; 
		if ( params.sortfield?.objid ) { 
			params.orderbyfilter = ' ORDER BY '+ params.sortfield.objid; 
		} 

		def list = em.getList( params );
		if ( !list ) throw new Exception('No records found.'); 

		list.each { perm-> 
			def lobs = getLOBs( perm.permitid ); 
			if ( lobs ) { 
				perm.lobs = lobs.collect{ it.name }.join(", "); 
				perm.gross = lobs.sum{( it.gross ? it.gross : 0.0 )} 
				perm.capital = lobs.sum{( it.capital ? it.capital : 0.0 )} 
			} 

			if ( perm.gross == null ) perm.gross = 0.0; 
			if ( perm.capital == null ) perm.capital = 0.0; 

			def ornos = em.getPayments([ permitid: perm.permitid ]);
			if ( ornos ) {
				perm.ornos = ornos.collect{ it.refno }.join(", "); 
			}
		} 
		return list;
	} 

	def getLOBs( permitid ) {
		def lobs = []; 
		em.getLOBs([ permitid: permitid ]).each{ o-> 
			if ( o.assessmenttype.toString().toUpperCase() == 'RETIRE' ) {
				def x = lobs.find{ it.lobid==o.lobid } 
				if ( x ) lobs.remove( x ); 

			} else {
				lobs << o; 
			}
		} 

		lobs.each{ o-> 
			if ( !o.gross ) o.gross = 0.0;
			if ( !o.capital ) o.capital = 0.0;
		} 
		return lobs; 
	} 

	def resolveDate( value ) {
		if ( value == null ) return null; 
		if ( value instanceof java.util.Date ) { 
			return new java.sql.Date( value.time ); 
		}

		try {
			def dt = java.sql.Timestamp.valueOf( value.toString());
			return new java.sql.Date( dt.time );  
		} catch(Throwable t) {;} 

		try {
			return java.sql.Date.valueOf( value.toString());   
		} catch(Throwable t) { 
			return null; 
		} 
	}
}