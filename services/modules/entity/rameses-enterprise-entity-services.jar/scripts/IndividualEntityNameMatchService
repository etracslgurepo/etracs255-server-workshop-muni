import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class IndividualEntityNameMatchService {

	@DataContext("entityindividual")
	def em;

	@Service("DateService")
	def dateSvc;

	double threshold = 0.88;

	@ProxyMethod
	public def getMatches( def info ) {
		//filter first the data in the database.
		//let us look first for 100% match in names. 

		def test = [:];
		if(info.lastname.length() < 2) 
			throw new Exception("Lastname must be at least 2 characters");

		test.lastname = info.lastname[0..1]+"%";

		def list = em.select("objid,entityno,lastname,firstname,middlename,birthdate,gender,name,address.objid,address.text")
			.where("lastname LIKE :lname ", [lname: test.lastname]).list();

		if(!list) return  [];

		def matches = [];
		JaroWinkler matcher = new JaroWinkler( 0.70, 4 );

		list.each {
			def n1 = info.lastname + ", " + info.firstname;
			def n2 = it.lastname + ", " + it.firstname;
			if( info.middlename && it.middlename ) {
				n1 = n1 + " " + info.middlename;
				n2 = n2 + " " + it.middlename;	
			}
			it.match = NumberUtil.round( matcher.compare( n1, n2 ) ); 
			if( it.match >= threshold ) {
				matches << it;
			}
		}
		def sorted = matches.sort{ it.match * -1 };

		def result = [];
		int i = 0; 
		for(it in sorted) { 
			if ( i>=50 ) break; 

			it.match = it.match * 100; 
			if ( it.birthdate ) { 
				try { 
 					it.age = dateSvc.calculateAge( it.birthdate ); 
 					if ( !it.age ) it.age = null; 
 				} catch(Throwable t) {;} 
			} 

			result << it;			
			i++;
		}
		return result.sort{ (it.match * -1) };
	}

}