import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;

class RuleActionDefService  {

	@ActiveDB("rule")
	def em;
	
	@Service("DateService")
	def dateSvc;

	@Service("TemplateService")
	def template;

	@Env
	def env;

	@DataContext("sys_rule_actiondef")
	def actionDefEm;

	@ProxyMethod
	public def find(o) {
		def a = em.read( o, "actiondef" );
		a.params = em.getActionDefParams(o);
		a.rulesets = em.getActionDefRulesets(o);
		return a;
	}

	@ProxyMethod
	public def save( def o ) {
		if(!o.params || o.params.size() < 1)
			throw new Exception("There must be at least one parameter");

		em.save(o, "actiondef");
		o._deleted_params?.each { 
			em.delete(it, "actiondef_param");
		}
		int i = 1;
		o.params.each {
			it.sortorder = (i++);
			it.parentid = o.objid;
			em.save( it, "actiondef_param")
		}
	}

	@ProxyMethod
	public void removeEntity(o) {
		em.removeActionDefParams(o);
		em.removeActionDef(o);
	}

	@ProxyMethod
	public void copy( def o ) {
		if(!o.oldid) throw new Exception("oldid is required in RuleFactService.copy");
		if(!o.newid) throw new Exception("newid is required in RuleFactService.copy");
		if( o.newid.matches(".*\\s{1,}.*"))
			throw new Exception("Action Class must not contain spaces");		
		
		actionDefEm.copyActionDef(o);
		actionDefEm.copyActionDefParam(o);
		actionDefEm.copyRulesetActionDefs(o);
	}

	/**********************************************************************************************
	* refactor changes the objid of the action to its classname, 
	* also updates action params objid to classname + parameter name
	* it also updates all links to all rule actions and rule action parameters 
	**********************************************************************************************/
	@ProxyMethod
	public void refactor( def o ) {
		if(!o.oldid) throw new Exception("oldid is required in RuleFactService.copy");
		if(!o.newid) throw new Exception("newid is required in RuleFactService.copy");

		if( o.newid.matches(".*\\s{1,}.*"))
			throw new Exception("Action Class must not contain spaces");		

		o.copyruleset = true;	
		copy(o);
		
		//refactor conditions
		actionDefEm.refactorAction(o);
		actionDefEm.refactorActionParam(o);

		//remove old fact
		actionDefEm.removeRulesetActionDef(o);
		actionDefEm.removeActionDefParam(o);
		actionDefEm.removeActionDef(o);

	}

	/**********************************************************************************************
	* merge is similar to refactor except it does not make a new copy
	* instead it will use an existing copy and links that instead
	**********************************************************************************************/
	@ProxyMethod
	public void merge( def o ) {
		if(!o.oldid) throw new Exception("oldid is required in RuleFactService.copy");
		if(!o.newid) throw new Exception("newid is required in RuleFactService.copy");

		if( o.newid.matches(".*\\s{1,}.*"))
			throw new Exception("Action Class must not contain spaces");

		def m = actionDefEm.find( [objid: o.newid ] ).first();

		if( !m) throw new Exception("Class definition " + o.newid + " does not exist. Please make sure the target class is updated before proceeding");					
		if( m.objid != o.newid) throw new Exception("Class must match exact objid");

		actionDefEm.copyRulesetActionDefs(o);

		//refactor conditions
		actionDefEm.refactorAction(o);
		actionDefEm.refactorActionParam(o);

		//remove old fact
		actionDefEm.removeRulesetActionDef(o);
		actionDefEm.removeActionDefParam(o);
		actionDefEm.removeActionDef(o);
	}

}
