import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class LandTaxReportStatementOfShareInterceptor{
    @Service('LandTaxReportStatementOfShareService')
    def svc 

    @After(pattern="LandTaxReportStatementOfShareService.getReportData")
    public void afterGetData(ei) {
        def params = ei.args[0]
        def data = ei.result
        def res = getReportData(params._tag, params)
        data.putAll(res)
    }

    def getReportData(tag, params) {
        def handlers = [:]
        handlers['statement_of_share_basic'] = { svc.generateBasicShares(it) }
        handlers['statement_of_share_basic_abstract'] = { svc.generateBasicSharesAbstract(it) }
        handlers['statement_of_share_basic_summary'] = { svc.generateBasicSharesSummary(it) }
        handlers['statement_of_share_brgy'] = { svc.getBarangayShares(it) }
        handlers['statement_of_share_brgy_advance'] = { svc.getBarangayAdvanceShares(it) }
        handlers['statement_of_share_sef'] = { svc.generateSefShares(it) }

        def handler = handlers[tag]
        if (!handler) throw new Exception('Report handler ' + tag + ' is not registered')

        return handler(params)
    }
}