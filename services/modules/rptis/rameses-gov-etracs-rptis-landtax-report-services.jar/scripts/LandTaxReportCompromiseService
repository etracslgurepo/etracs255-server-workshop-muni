import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class LandTaxReportCompromiseService{
    @ActiveDB('landtaxreport_compromise')
    def em

    @ActiveDB('rptcompromise')
    def compromiseEm

    
    @ProxyMethod
    public def buildApplicationData(objid) {
        def compromise = getCompromiseInfo([objid:objid])
        compromise.credits = em.getCredits([objid:objid]).each{
            if (it.type == 'cypayment')
                it.particular = it.year + ' Payment'
        }
        return compromise
    }


    @ProxyMethod
    public def getLedgerData( compromise ) {
        compromise = getCompromiseInfo(compromise)
        def balance = compromise.amount
        compromise.credits = em.getLedgerCredits(compromise).eachWithIndex{v, idx ->
            v.idx = ++idx
            v.balance = balance - v.oramount 
            balance -= v.oramount 
        }
        compromise.balance = balance 
        return compromise
    }    

    def getCompromiseInfo(compromise){
        compromise = compromiseEm.read(compromise)
        if( ! compromise ) {
            throw new Exception('Compromise Agreement does not exist or has already been deleted.')
        }
        compromise.putAll(em.findLedgerInfo([objid:compromise.rptledgerid]))
        return compromise 
    }

}