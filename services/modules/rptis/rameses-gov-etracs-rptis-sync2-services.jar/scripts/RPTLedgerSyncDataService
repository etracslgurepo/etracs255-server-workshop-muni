import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.util.*
import com.rameses.services.extended.*


class RPTLedgerSyncDataService
{
    @Service('RPTUtil')
    def util

    @Service('RPTLedgerService')
    def ledgerSvc 

    @Service('LogService')
    def logSvc

    @Service('RPTMainSyncDataService')
    def syncSvc 

    @Service('RPTSyncDataService')
    def rptSync

    @DataContext('rptledger')
    def em_rptledger

    @DataContext('rptledger_faas')
    def em_rptledger_faas

    @DataContext('rptledger_item')
    def em_rptledger_item

    @DataContext('rptledger_subledger')
    def em_rptledger_subledger

    @DataContext('rptledger_avdifference')
    def em_avdifference

    @DataContext('faas_restriction')
    def em_faas_restriction

    @DataContext('rptpayment')
    def em_rptpayment

    @DataContext('rptpayment_item')
    def em_rptpayment_item

    @DataContext('remote_mapping')
    def em_remote


    /*---------------------------------------------
    * Return the objids of the items to sync.
    * This will be used by the remote server to send
    * only the data with an objid not on the list to 
    * minimize data size and bandwith
    ---------------------------------------------*/
    @ProxyMethod
    public def getItemsObjid(ledger){
        ledger = ledgerSvc.open([objid: ledger.objid])
        buildItemsInfo(ledger)
        return [
            items: ledger._items.collect{ it.objid },
            differences: ledger._differences.collect{ it.objid },
            credits: ledger._credits.collect{ it.objid },
            restrictions: ledger._restrictions.collect{ it.objid },
        ]
    }


    /*-----------------------------------------------
    * Return ledger information to sync. 
    * Only items not included in the idinfo.items 
    * are returned. 
    -----------------------------------------------*/
    @ProxyMethod
    public def getInfo(mapping){
        def ledger = open([objid:mapping.remote.objid])
        buildItemsInfo(ledger)
        removeSyncedItems(ledger._items, mapping.idinfo.items)
        removeSyncedItems(ledger._differences, mapping.idinfo.differences)
        removeSyncedItems(ledger._credits, mapping.idinfo.credits)
        removeSyncedItems(ledger._restrictions, mapping.idinfo.restrictions)
        loadPaymentItems(ledger._credits)
        return ledger 
    }


    @ProxyMethod
    public void sync(remoteledger){
        def ledger = em_rptledger.find([objid: remoteledger.objid]).first()
        if (!ledger){
            // could be deleted, do nothing
            return 
        }

        if (checkUpdatedPayment(ledger, remoteledger)){
            mergeLedgerHistory(ledger, remoteledger)
        }
        else {
            overrideLedger(ledger, remoteledger)
        }

        em_rptledger_item.find([parentid: remoteledger.objid]).delete() 
        remoteledger._items?.each{
            it.taxdifference = util.toBoolean(it.taxdifference, false)
            em_rptledger_item.save(it)
        }

        em_avdifference.find([parent_objid: remoteledger.objid]).delete() 
        remoteledger._differences?.each{
            em_avdifference.save(it)
        }

        remoteledger._credits?.each{
            em_rptpayment.save(it)
            it.items.each{pitem ->
                em_rptpayment_item.save(pitem)
            }
        }

        remoteledger._subledgers?.each{
            em_rptledger_subledger.save(it)
        }

        remoteledger._restrictions?.each{
            em_faas_restriction.save(it)
        }
    }

    void mergeLedgerHistory(ledger, remoteledger) {
        em_rptledger_faas.find([rptledgerid: ledger.objid]).update([state:'CANCELLED'])
        remoteledger.faases.each {
            it.taxable = util.toBoolean(it.taxable, true)
            em_rptledger_faas.save(it)
        }
    }

    void overrideLedger(ledger, remoteledger){
        remoteledger.faases.each {
            it.taxable = util.toBoolean(it.taxable, true)
        }
        em_rptledger_faas.find([rptledgerid: ledger.objid]).update([state:'CANCELLED'])
        em_rptledger.save(remoteledger) 
    }

    /*---------------------------------------------------------
    * Checks if ledger payment is updated based on lastyearpaid
    * and lastqtrpaid. 
    ---------------------------------------------------------*/
    def checkUpdatedPayment(ledger, remoteledger) {
        if (ledger.lastyarpaid > remoteledger.lastyearpaid ||
            (ledger.lastyearpaid == remoteledger.lastyearpaid && ledger.lastqtrpaid > remoteledger.lastqtrpaid)){
            // local payment is more updated then remote payment
            return true 
        }
        return false 
    }

    void loadPaymentItems(credits){
        credits.each{
            it.items = em_rptpayment_item.where('parentid = :parentid and amount > 0', [parentid:it.objid]).list()
        }
    }

    void removeSyncedItems(items, oids){
        def deletedItems = []
        oids.each{oid ->
            deletedItems += items.findAll{it.objid == oid}
        }
        if (deletedItems){
            items.removeAll(deletedItems)
        }
    }

    void buildItemsInfo(ledger) {
        ledger._items = em_rptledger_item.find([parentid: ledger.objid]).list()
        ledger._differences = em_avdifference.find([parent_objid: ledger.objid]).list()
        ledger._credits = em_rptpayment.find([refid: ledger.objid]).list()
        ledger._restrictions = em_faas_restriction.find([ledger_objid: ledger.objid]).list()
    }


    /*---------------------------------------------------------
    *
    * SCHEDULING SYNC SUPPORT 
    *
    ---------------------------------------------------------*/

    def getActions() {
        return  [
            'RPTLEDGER-POST-PAYMENT': [send: sendPaymentData, receive: postPayment, schedule: schedulePostPayment],
            'RPTLEDGER-POST-VOID-PAYMENT': [send: sendVoidPaymentData, receive: postVoidPayment, schedule: scheduleVoidReceipt],
        ]
    }

    @ProxyMethod
    public void schedule(data) {
        def action= getActions()[data.action]
        if (!action) throw new Exception('RPTLedger scheduler not found for action ' + data.action)

        def rptledger = em_rptledger.select('objid,tdno,lguid,originlguid').find([objid: data.objid]).first()
        data.remote = rptSync.getRemoteOrg(rptledger)
        def syncdata = syncSvc.create(data)
        action.schedule(syncdata, rptledger)
    }

    def createSyncItem(data, syncdata, action) {
        return [
            refid: data.objid, 
            reftype: syncdata.reftype, 
            refno: syncdata.refno, 
            action: (action ? action : syncdata.action),
            info: (syncdata.info ? syncdata.info : [:])
        ]
    }

    /*=========================================================
    * schedule payment as per ledger to support cases
    * where paid ledgers are from different municipalities
    =========================================================*/
    def schedulePostPayment = {data, rptledger ->
        def pmt = em_rptpayment.find([objid: data.info.paymentid]).first()
        data.remote = rptSync.getRemoteOrg(rptledger)
        def syncdata = syncSvc.create(data)
        def item = createSyncItem(data, syncdata, 'RPTLEDGER-POST-PAYMENT')
        item.info.rptledgerid = rptledger.objid
        syncSvc.createItem(syncdata, item)
    }

    /*=========================================================
    * schedule voidpayment as per ledger to support cases
    * where paid ledgers are from different municipalities
    =========================================================*/
    def scheduleVoidReceipt = {data, rptledger ->
        def pmt = em_rptpayment.find([objid: data.info.paymentid]).first()
        data.remote = rptSync.getRemoteOrg(rptledger)
        def syncdata = syncSvc.create(data)
        def item = createSyncItem(data, syncdata, 'RPTLEDGER-POST-VOID-PAYMENT')
        item.info.rptledgerid = rptledger.objid
        syncSvc.createItem(syncdata, item)
    }


    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS 
    *
    ---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}



    /*---------------------------------------------------------
    *
    * SEND/RECEIVE SUPPORT METHODS
    *
    ---------------------------------------------------------*/
    def sendPaymentData = {syncdata ->
        def pmt = em_rptpayment.find([objid: syncdata.info.paymentid]).first()
        if (pmt) {
            def mapping = em_remote.find([objid: pmt.refid, doctype:'rptledger']).first()
            if (mapping){
                pmt.rptledger = em_rptledger.find([objid:pmt.refid]).first()
                pmt.ledgeritems = em_rptledger_item.find([parentid: pmt.refid]).list()
                pmt.items = em_rptpayment_item.find([parentid: pmt.objid]).list()

                pmt.refid = mapping.remote.objid 
                pmt.rptledger.objid = mapping.remote.objid 
                pmt.ledgeritems.each{ it.parentid = mapping.remote.objid }
            }
        } else {
            pmt = [:]
        }
        return pmt
    }   

    def postPayment = {syncdata ->
        def payment = syncdata.data 

        def ledger = em_rptledger.find([objid: payment.rptledger.objid]).first()
        if (!ledger){
            return 
        }
        
        if (checkUpdatedPayment(ledger, payment.rptledger)) {
            return 
        }

        if (!checkPayment(payment)) {
            em_rptledger.save(payment.rptledger)

            em_rptledger_item.find([parentid: ledger.objid]).delete()
            payment.ledgeritems.each{
                em_rptledger_item.save(it)
            }

            em_rptpayment.save(payment)
            payment.items.each{
                em_rptpayment_item.save(it)
            }
        }
    }



    def sendVoidPaymentData = {syncdata ->
        def pmt = em_rptpayment.find([objid: syncdata.info.paymentid]).first()
        if (pmt) {
            def mapping = em_remote.find([objid: pmt.refid, doctype:'rptledger']).first()
            if (mapping){
                pmt.rptledger = em_rptledger.find([objid:pmt.refid]).first()
                pmt.ledgeritems = em_rptledger_item.find([parentid: pmt.refid]).list()
                pmt.refid = mapping.remote.objid 
                pmt.rptledger.objid = mapping.remote.objid 
                pmt.ledgeritems.each{ it.parentid = mapping.remote.objid }
            }
        } else {
            pmt = [:]
        }
        return pmt
    }   

    def postVoidPayment = {syncdata ->
        def payment = syncdata.data 
        def ledger = em_rptledger.find([objid: payment.rptledger.objid]).first()
        def remoteledger = payment.rptledger 

        em_rptledger.save(remoteledger)
        em_rptpayment.find([objid: payment.objid]).update([voided: true])

        em_rptledger_item.find([parentid: ledger.objid]).delete()
        payment.ledgeritems.each{
            em_rptledger_item.create(it)
        }
        logSvc.log('voidpayment', 'rptledger', ledger.objid)
    }

    def checkPayment(payment) {
        return em_rptpayment.find([objid: payment.objid]).first() != null 
    }

}


