import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class FAASSyncDataService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncDataService')
	def syncSvc 

    @Service('RPTSyncDataService')
    def rptSync

    @Service('RPTSyncDataSupport')
    def support

    @Service('FAASWorkflowService')
	def workflowSvc

	@Service('FAASService')
	def faasSvc

	@Service('EntityService')
	def entitySvc

	@Service('RPUService')
	def rpuSvc 

	@Service('RPTLedgerService')
	def ledgerSvc

	@Service('RPTSmsService')
	def rptsmsSvc

	@Service('FAASStewardshipService')
	def stewardshipSvc

	@Service('RPTUtil')
	def util

	@DataContext('faas_task')
	def em_task

	@DataContext('faas_list')
	def em_faaslist 

	@DataContext('rptledger')
    def em_ledger

    @DataContext('rptpayment')
    def em_payment

    @DataContext('rpu')
    def em_rpu

	@DataContext('sys_org')
    def em_org


	def getActions(){
		return  [
	    	'FAAS-DATA': [send: sendFaasData, receive: saveFaasData, schedule: scheduleFaas],
	    	'FAAS-DATACAPTURE': [send: sendFaasData, receive: saveCapturedData, schedule: scheduleDataCapturedFAAS],
	    	'FAAS-DELETE': [send: sendFaas, receive: deleteFaas, schedule: scheduleDeleteFaas],
	    	'FAAS-REVERT-TO-INTERIM': [send: sendFaas, receive: deleteFaas, schedule: scheduleRevertToInterim],
	    	'FAAS-AFFECTED-FAAS': [send: sendFaasData, receive: saveAffectedFaas],
	    	'FAAS-PARENT-FAAS': [send: sendFaasData, receive: saveParentFaas],
	    	'FAAS-STEWARDSHIP-FAAS': [send: getStewardshipFaas, receive: saveStewardshipFaas],
	    	'FAAS-APPROVAL': [send: {}, receive: {}, schedule: scheduleOnlineApprovedFAAS],
	    	'FAAS-REMOTE-TXN': [send: sendFaasData, receive: postRemoteFaas],
	    	'FAAS-REMOTE-APPROVAL': [send: sendFaasData, receive: postRemoteApproval],
	    	'FAAS-PROVINCE-APPROVAL': [send: sendFaasData, receive: postFaasForApproval, schedule: scheduleProvinceApproval],
	    	'FAAS-REQUIREMENTS': [send: {}, receive: {}, schedule: scheduleRequirements],
	    ]
	}


	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/
	@ProxyMethod
	public void schedule(data) {
		def action= getActions()[data.action]
		if (!action) throw new Exception('Scheduler not found for action ' + data.action)

		def faas = em_faaslist.select('objid,lguid,originlguid').find([objid: data.objid]).first()
		if (!faas) faas = [objid: data.objid, lguid: data.remote.orgid]
		data.remote = rptSync.getRemoteOrg(faas)
        def syncdata = syncSvc.create(data)

		action.schedule(syncdata, faas)
	}

	def createSyncItem(entity, syncdata, action) {
		def item = [
			refid: entity.objid, 
			reftype: syncdata.reftype, 
			refno: syncdata.refno, 
			action: (action ? action : syncdata.action)
		]
        return syncSvc.createItem(syncdata, item)
	}

	def scheduleDataCapturedFAAS = {syncdata, faas ->
		createSyncItem(faas, syncdata, null)
        scheduleSharedData(syncdata, faas)
	}

	def scheduleOnlineApprovedFAAS = {syncdata, faas ->
        def item = null
        if (checkTransactionIsLocal(faas)){
        	createSyncItem(faas, syncdata, 'FAAS-REMOTE-TXN')
        	scheduleSharedData(syncdata, faas)
        } else {
        	createSyncItem(faas, syncdata, 'FAAS-REMOTE-APPROVAL')
        }
	}

	def scheduleProvinceApproval = {syncdata, faas ->
		createSyncItem(faas, syncdata, null)
        scheduleSharedData(syncdata, faas)
	}	

	def scheduleRequirements = {syncdata, faas ->
		rptSync.scheduleRequirements(syncdata, faas.objid)
	}	

	def scheduleDeleteFaas = {syncdata, faas ->
        createSyncItem(faas, syncdata, 'FAAS-DELETE')
	}

	def scheduleRevertToInterim = {syncdata, faas ->
		createSyncItem(faas, syncdata, 'FAAS-REVERT-TO-INTERIM')
	}

	@ProxyMethod
	public void scheduleFaasData(syncdata, faas) {
		scheduleFaas(syncdata, faas)
	}

	def scheduleFaas = {syncdata, faas ->
        createSyncItem(faas, syncdata, 'FAAS-DATA')
        scheduleSharedData(syncdata, faas)
	}


    void scheduleSharedData(syncdata, faas) {
    	rptSync.scheduleExaminations(syncdata, faas.objid)
    	rptSync.scheduleRequirements(syncdata, faas.objid)
    	rptSync.scheduleImagesByRefId(syncdata, faas.objid)

    	def item = null
    	faas.affectedrpus.each{
    		if (it.newfaasid) {
    			def newfaas = [objid: it.newfaasid]
    			createSyncItem(newfaas, syncdata, 'FAAS-AFFECTED-FAAS')
    			scheduleSharedData(syncdata, newfaas)
    		}
    	}

    	if (faas.parentfaasid) {
    		def parentfaas = [objid: faas.parentfaasid]
    		createSyncItem(parentfaas, syncdata, 'FAAS-PARENT-FAAS')
    	}
    }	


    def checkTransactionIsLocal(faas) {
        def rootOrg = rptSync.getRootOrg()
        return faas.originlguid == rootOrg.objid
    }


	
	/*---------------------------------------------------------
	*
	* UPLOAD/DOWNLOAD HANDLERS 
	*
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}


	/*---------------------------------------------------------
	*
	* SUPPORT METHODS
	*
	---------------------------------------------------------*/
	def saveFaasData = {syncdata ->
		def faas = syncdata.data
		saveFaas(faas)
	}

	def saveCapturedData = {syncdata ->
		def faas = syncdata.data
		saveFaas(faas)
		if ('PROVINCE'.equalsIgnoreCase(syncdata.parent.remote.orgclass)){
			if (checkManuallyApprovedTransaction(faas)) { 
				faasSvc.approveFaasByMunicipality(faas)
			}
		} else if ('MUNICIPALITY'.equalsIgnoreCase(syncdata.parent.remote.orgclass)) {
			faasSvc.approveFaasByRemote(faas)
			postLedger(faas)
		}
	}

	def saveAffectedFaas = {syncdata ->
		def faas = syncdata.data
		saveFaas(faas)
	}

	def saveParentFaas = {syncdata ->
		def faas = syncdata.data
		saveFaas(faas)
		faasSvc.cancelPreviousFaases(faas)
	}

	def saveStewardshipFaas = {syncdata ->
		def faas = syncdata.data
		stewardshipSvc.insertStewardFaas(faas)
	}

	def deleteFaas = {syncdata ->
		def faas = syncdata.data
		faas = em_faaslist.find([objid: faas.objid]).first()

		if (checkAllowDeleteFaas(faas)){
			faas = faasSvc.openFaas(faas)
			def ledger = em_ledger.find([faasid: faas.objid]).first()
			if (ledger) {
				em_ledger.find([objid: ledger.objid]).update([faasid: null])
			}
			faas.allowdelete = true
			faasSvc.deleteRevertedFaas(faas)
		}
	}

	def checkAllowDeleteFaas(faas) {
		if (!faas) 
			return false 
		
		if (!util.isTrue(faas.datacapture)) 
			return false 

		if (checkHasPayment(faas))
			return false 

		if (checkHasImprovement(faas)) 
			return false 

		return true 
	}

	def checkHasPayment(faas){
		def ledger = em_ledger.find([faasid: faas.objid]).first()
		if (ledger) {
			def pmt = em_payment.find([refid: ledger.objid, voided: false]).first()
			return pmt != null 
		}
		return false 
	}

	def checkHasImprovement(faas){
		if ('land'.equalsIgnoreCase(faas.rputype))
			return false 

		def improvement = em_faaslist.where("rpuid = :rpuid and realpropertyid = :realpropertyid and rputype <> 'land'", faas).first()
		return improvement != null 
	}

	def checkManuallyApprovedTransaction(faas) {
		if (faas.previousfaases && faas.previousfaases.findAll{it.prevfaasid != null} ){
			return true
		}
		return false 
	}

	void postLedger(faas) {
		if (checkLedgerExist(faas)) {
			ledgerSvc.postLedgerFaasData(faas)
		} else {
			ledgerSvc.postNewLedger(faas)
		}
	}

	def checkLedgerExist(faas){
        def ledger = em_ledger.select('objid').find([faasid:faas.objid]).first() 
        if (!ledger)
            ledger = em_ledger.select('objid').find([tdno:faas.prevtdno]).first() 
        return ledger != null 
    }


	/*--------------------------------------------------------
	* faas is processed remotely 
	* just synchronized data 
	--------------------------------------------------------*/
	def postRemoteFaas = {syncdata ->
		def remoteFaas = syncdata.data 
		syncdata.remote = em_org.find([objid: remoteFaas.originlguid]).first();
		if (!syncdata.remote) throw new Exception('originlguid or remote is not specified');
		saveFaas(remoteFaas)
		
		if ('PROVINCE'.equalsIgnoreCase(syncdata.remote.orgclass)){
			faasSvc.approveFaasByMunicipality(remoteFaas)
		} else if ('MUNICIPALITY'.equalsIgnoreCase(syncdata.remote.orgclass)) {
			faasSvc.approveFaasByRemote(remoteFaas)
		}
	}

	def postRemoteApproval = {syncdata ->
		def remoteFaas = syncdata.data

		if (!checkFaasExist(remoteFaas)){
			remoteFaas.state = 'INTERIM'
			saveFaas(remoteFaas)
		} 

		def state = getState(remoteFaas) 
		if (! state.toUpperCase().matches('CURRENT|CANCELLED')){
			def faas = faasSvc.openFaas(remoteFaas)
			faas.approver = remoteFaas.approver
			faas.tdno = remoteFaas.tdno 
			faas.utdno = remoteFaas.utdno 
			remoteFaas.state = faas.state
			faasSvc.updateFaas(remoteFaas)
			faasSvc.approveFaas(faas)
			postLedger(faas)
			updateSignatory(remoteFaas)
		} else {
			updateSignatory(remoteFaas)
		}
	}

	void updateSignatory(remoteFaas) {
		saveTasks(remoteFaas)
		faasSvc.updateSignatoryInfo(remoteFaas.tasks.find{it.state == 'approver'})
		notifyRecommender(remoteFaas)
		rptsmsSvc.notifyClient(remoteFaas)
	}

	def postFaasForApproval = {syncdata ->
		def remoteFaas = syncdata.data
		
		if (! checkFaasExist(remoteFaas)) {
			excludeOpenTask(remoteFaas)
			saveFaas(remoteFaas)
		} else {
			saveFaas(remoteFaas)			
		}
		startWorkflow(syncdata, remoteFaas)
	}

	def getFaas = {syncdata ->
		return [objid: syncdata.refid]
	}

	def sendFaas = {syncdata ->
		return getFaas(syncdata)
	}

	def sendFaasData = {syncdata -> 
		def faas = faasSvc.openFaas(getFaas(syncdata))
		faas.rpu.rpumaster = rpuSvc.openRpuMaster(faas.rpu)
		if (faas.taxpayer && faas.taxpayer.objid) {
			faas.taxpayer = entitySvc.open(faas.taxpayer)
		}
		faas.tasks = em_task.where('refid = :refid AND actor.name IS NOT NULL', [refid: faas.objid]).list()
		faas.signatory = faasSvc.findSignatory(faas)
		faas.sketch = faasSvc.openSketch(faas)
		faas._options = syncdata.info 
		return faas
	}

	def getStewardshipFaas = {syncdata ->
		def parentfaas = faasSvc.openFaas(getFaas(syncdata))
		
		def param = [:]
		param.rpumasterid  = parentfaas.rpu.rpumasterid
		param.stewardrpumasterid = rpu.rpumasterid 
		param.ry = rpu.ry 
		param.stewardshipno = rp.stewardshipno
		return stewardshipSvc.findStewardFaas(param)
	}

	void saveFaas( faas ) {
		faas._checkTxnRef = false;
		
		saveEntity(faas)

		if (faasSvc.faasExist(faas)){
			faasSvc.updateFaas(faas)
		}
		else {
			faasSvc.createFaas(faas)
		}

		faas.tasks.each{
			em_task.save(it)
		}

		faasSvc.saveSignatory(faas.signatory)
		faasSvc.saveSketch(faas.sketch)
	}    

	void saveEntity(faas){
		def addr = faas.taxpayer.address
		if (!addr) {
			addr = [parentid:faas.taxpayer.objid, type:'local', text:'.']
			faas.taxpayer.address = addr
		}
		else if (addr instanceof String) {
			def s = addr 
			addr = [parentid:faas.taxpayer.objid, type:'local', text:s]
			faas.taxpayer.address = addr
		}
		entitySvc.save(faas.taxpayer)
		faas.taxpayer.address = faas.taxpayer?.address?.text 
	}    

	void excludeOpenTask(faas) {
		if (faas.tasks){
			def opentask = faas.tasks.find{it.enddate == null}
			faas.tasks.remove(opentask)
		}
	}

	void saveTasks( faas ) {
		//delete open task
		em_task.where('refid = :objid and enddate is null', faas).delete()

		faas.tasks.each{
			em_task.save(it)
		}
	}

	def checkFaasExist(faas) {
		return em_faaslist.find([objid: faas.objid]).first() != null
	}

	def getState(faas) {
		return em_faaslist.select('state').find([objid: faas.objid]).first()?.state 
	}

	void startWorkflow(syncdata, faas){
		def opentask = em_task.find([refid: faas.objid]).where("startdate IS NULL").first();
		if (opentask) return;

		def tasks = workflowSvc.start([refid:faas.objid, data:faas])
		if (tasks){
			faas.taskid = tasks[0].objid
		}
		notifyGroup(syncdata, faas)
	}

	void notifyGroup(syncdata, faas){
        def param = [:]
        param.objid = faas.objid 
        param.sender = syncdata.sender
        param.recipientid = 'assign-receiver'
        param.filetype = 'faas'
        param.msg = 'FAAS ' + (faas.tdno ? faas.tdno : faas.utdno) + ' (assign-receiver) submitted by ' + syncdata.sender.name + '.'
        param.taskid = faas.taskid 
        support.notifyGroup(param)
	}

	void notifyRecommender(faas) {
		def param = [:]
		param.objid = faas.objid 
		param.tasks = faas.tasks 
		param.filetype = 'faas'
		param.sender = faas.approver 
		param.msg = 'FAAS ' + faas.tdno + ' has been approved by ' + faas.approver.name
		param.recommendertask = em_task.find([refid: param.objid, state: 'recommender'])
								.orderBy('enddate desc').first()

		support.notifyRecommender(param)
	}
}
