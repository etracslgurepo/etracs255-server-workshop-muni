import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


/*----------------------------------------------------------------
* Cancelled FAAS Synchronization support shared 
* between province and municipalities 
-----------------------------------------------------------------*/
class CancelledFAASSyncDataInterceptor
{
    @Env
    def env

    @Service('RPTMainSyncDataService')
    def mainSyncSvc

    @Service('RPTSyncDataService')
    def syncSvc

    @Service('CancelledFAASSyncDataService')
    def cancelSync 


    /*---------------------------------------------------------
    *
    * SCHEDULING SUPPORT
    *
    ---------------------------------------------------------*/
    @After(pattern="CancelledFAASService.approve") 
    public void scheduleManualApproved( evt ) {
        def cancelledfaas = evt.result
        mainSyncSvc.createDataForSync(getDataForSync(cancelledfaas, 'CANCELLEDFAAS-MANUAL-APPROVED'))
    }

    @After(pattern="CancelledFAASWorkflowService.signal", eval="#{args[0].state == 'recommender' && args[0].action == 'submit_to_province'}", index=50000) 
    public void scheduleSubmitToProvince( evt ) {
        def cancelledfaas = evt.args[0].data
        mainSyncSvc.createDataForSync(getDataForSync(cancelledfaas, 'CANCELLEDFAAS-FORAPPROVAL'))
    }

    @After(pattern="CancelledFAASService.onlineApprove") 
    public void scheduleOnlineApproved( evt ) {
        def cancelledfaas = evt.result
        mainSyncSvc.createDataForSync(getDataForSync(cancelledfaas, 'CANCELLEDFAAS-ONLINE-APPROVED'))
    }

    /* scheduler */
    @After(pattern="RPTMainSyncDataService.scheduleSync", eval="#{result.action.matches('CANCELLEDFAAS-.*')}", index=50000) 
    public void scheduleForSync( evt ) {
        def data = evt.result 
        cancelSync.schedule(data)
    }   



    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS
    *
    ---------------------------------------------------------*/
    @After(pattern="RPTMainSyncDataService.asyncSend", eval="#{result.action.matches('CANCELLEDFAAS-.*')}") 
    public void send( evt ) {
        cancelSync.send(evt.result)
    }   

    @After(pattern="RPTMainSyncDataService.receive", eval="#{args[0].action.matches('CANCELLEDFAAS-.*')}") 
    public void receiveData(evt){
        cancelSync.receive(evt.args[0])
    }


    def getDataForSync(cancelledfaas, action) {
        def data = [:]
        data.objid = cancelledfaas.objid
        data.reftype = 'cancelledfaas'
        data.refno = cancelledfaas.txnno
        data.orgid = env.ORGID
        data.remote = syncSvc.getRemoteOrg(cancelledfaas)
        data.action = action
        data.info = [:]
        return data
    }


}

