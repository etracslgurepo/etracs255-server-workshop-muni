import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


/*----------------------------------------------------------------
* Subdivision Synchronization support shared 
* between province and municipalities 
-----------------------------------------------------------------*/
class SubdivisionSyncDataInterceptor
{
    @Env
    def env

    @Service('RPTMainSyncDataService')
    def mainSyncSvc    

    @Service('RPTSyncDataService')
    def syncSvc

    @Service('SubdivisionSyncDataService')
    def subdivisionSync 


    /*---------------------------------------------------------
    *
    * SCHEDULING SUPPORT
    *
    ---------------------------------------------------------*/
    @After(pattern="SubdivisionWorkflowService.signal", eval="#{args[0].state.matches('forprovsubmission') && args[0].action=='completed'}", index=10000) 
    public void scheduleSubmitToProvince( evt ) {
        def subdivision = evt.args[0].data;
        mainSyncSvc.createDataForSync(getDataForSync(subdivision, 'SUBDIVISION-FORAPPROVAL'))
    }

    @After(pattern="MunicipalitySubdivisionSupport2Service.resendToProvince", index=10000) 
    public void scheduleResendToProvince( evt ) {
        def subdivision = evt.result;
        mainSyncSvc.createDataForSync(getDataForSync(subdivision, 'SUBDIVISION-FORAPPROVAL'))
    }

    @After(pattern="MunicipalitySubdivisionSupport2Service.resendRequirements", index=10000) 
    public void scheduleResendRequirements( evt ) {
        def subdivision = evt.result;
        mainSyncSvc.createDataForSync(getDataForSync(subdivision, 'SUBDIVISION-REQUIREMENTS'))
    }

    @After(pattern="SubdivisionWorkflowService.signal", eval="#{args[0].state.matches('approver|provapprover|muniapprover') && args[0].action=='completed'}", index=10000) 
    public void scheduleSubdivisionApproval( evt ) {
        def subdivision = evt.args[0].data;
        mainSyncSvc.createDataForSync(getDataForSync(subdivision, 'SUBDIVISION-APPROVED'))
    }

    @After(pattern="SubdivisionService.resendToMunicipality", index=10000) 
    public void resendToMunicipality( evt ) {
        def subdivision = evt.result;
        mainSyncSvc.createDataForSync(getDataForSync(subdivision, 'SUBDIVISION-APPROVED'))
    }
    

    // @After(pattern="SubdivisionWorkflowService.signal", eval="#{args[0].action=='disapprove'}", index=10000) 
    // public void scheduleSubdivisionDisapproval( evt ) {
    //     def subdivision = evt.args[0].data;
    //     mainSyncSvc.createDataForSync(getDataForSync(subdivision, 'SUBDIVISION-DISAPPROVAL'))
    // }


    /* scheduler */
    @After(pattern="RPTMainSyncDataService.scheduleSync", eval="#{result.action.matches('SUBDIVISION-.*')}", index=50000) 
    public void scheduleForSync( evt ) {
        def data = evt.result 
        subdivisionSync.schedule(data)
    }   


    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS
    *
    ---------------------------------------------------------*/
    @After(pattern="RPTMainSyncDataService.asyncSend", eval="#{result.action.matches('SUBDIVISION-.*')}") 
    public void send( evt ) {
        def syncdata = evt.result 
        subdivisionSync.send(syncdata)
    }   

    @After(pattern="RPTMainSyncDataService.receive", eval="#{args[0].action.matches('SUBDIVISION-.*')}") 
    public void receiveData(evt){
        def syncdata = evt.args[0]
        subdivisionSync.receive(syncdata)
    }



    def getDataForSync(subdivision, action) {
        def data = [:]
        data.objid = subdivision.objid
        data.reftype = 'subdivision'
        data.refno = subdivision.txnno
        data.orgid = env.ORGID
        data.remote = syncSvc.getRemoteOrg(subdivision)
        data.action = action
        data.info = [:]
        return data
    }
}

