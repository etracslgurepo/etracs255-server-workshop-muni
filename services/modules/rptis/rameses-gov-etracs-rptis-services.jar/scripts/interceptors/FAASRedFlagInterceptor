import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class FAASRedFlagInterceptor
{
	@Service('FAASService')
	def svc 

	@DataContext('faas_task')
	def em_task

	@DataContext('rpt_redflag')
	def em_redflag

	@After(pattern="QueryService.getList", eval="#{args[0]._schemaname == 'rpt_redflag'}")
	public void afterGetList(evt){
		def redflags = evt.result;
		redflags.each{
			it.info = em_redflag.serializer.read(it.info);
		}
	}

	@After(pattern="RPTRedFlagService.getEntity", index=1)
	public void afterGetEntity(evt){
		def redflag = evt.args[0]
		def entity  = evt.result 
		if (!entity.objid){
			try {
				def f = svc.openFaas([objid:redflag.refid])
				entity.putAll(f)
			}
			catch(Exception e) {
				//ignore				
			}
			
		}
	}


	/* set index to higher value to indicate as the default */
	@After(pattern="RPTRedFlagService.getCurrentTask", index=1000)
	public void afterGetCurrentTask(evt){
		def redflag = evt.args[0]
		def task = evt.result 
		if (!task.objid){
			try {
				def opentask = svc.findOpenTask([objid:redflag.refid])
				if (!opentask) {
					opentask = em_task.find([refid: redflag.refid, state: 'forprovsubmission'])
					           .orderBy('startdate desc')
										 .first();
				}
				if (opentask){
					opentask.filetype = 'faas'
					task.putAll(opentask)
				}
			}
			catch(Exception e) {
				//ignore				
			}
			
		}
	}

}

