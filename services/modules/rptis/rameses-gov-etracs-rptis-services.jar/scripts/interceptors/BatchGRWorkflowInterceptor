import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class BatchGRWorkflowInterceptor
{
	@Env 
	def env 

	@DataContext('sys_org')
	def em_org

	@DataContext('batchgr')
	def em_batchgr

	@DataContext('batchgr_item')
	def em_batchgr_item

	@ActiveDB('rpt_requirement')
	def em_requirement

	@Service('BatchGRWorkflowService')
	def workflowSvc

	@Service('BatchGRService')
	def batchSvc

	@Service('RPTRequirementRuleService')
    def ruleReqSvc

	@Service('RPTRequirementService')
	def reqSvc

	@Service('ExaminationService')
	def examinationSvc


	@After(pattern='BatchGRService.create')
	public void afterCreate(evt){
		def batchgr = evt.result 
		def info = evt.args[0] 

		batchgr.task = workflowSvc.start([refid:batchgr.objid, data:batchgr])[0]
		batchgr.taskid = batchgr.task.objid 
		batchgr.taskstate = batchgr.task.state

		def requirements = ruleReqSvc.getRequirements([
			txntype 		: batchgr.txntype,
			attributes		: info.attributes 
		])

		requirements.unique().each{
			em_requirement.create([
				objid  				: 'R' + new java.rmi.server.UID(),
				requirementtypeid 	: it.objid,
				handler 			: it.handler,
				refid 				: batchgr.objid,
				value_objid 		: null,
				value_txnno			: null,
				value_txndate 		: null,
				value_txnamount 	: 0.0,
				value_remarks 		: null,
				complied 			: 0,
			])
		}
	}


	@After(pattern="BatchGRWorkflowService.openTask") 
	public void handleWorkflowOpen( evt ) {
		def task = evt.result 
		if ( ! task.refid ) throw new Exception('RefId is required.')
		task.data = batchSvc.open([objid:task.refid])
		task.data.taskid = task.objid 
		task.data.taskaction = task.state
		task.data.assignee = task.assignee 
	}


	@Before(pattern="BatchGRWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('receiver') && args[0].action != 'delete'}", index=10) 
	public void validateReceiveInfo( evt ) {
		def batchgr = evt.args[0].data
		reqSvc.checkCompliance(batchgr.objid)
	}

	@After(pattern="BatchGRWorkflowService.signal", eval="#{args[0].action =='delete'}", index=10) 
	public void afterDelete( evt ) {
		def batchgr = evt.args[0].data
		batchSvc.delete(batchgr)
	}

	@After(pattern="BatchGRWorkflowService.signal", eval="#{args[0].action =='disapprove'}", index=10) 
	public void afterDisapprove( evt ) {
		def batchgr = evt.args[0].data
		batchSvc.delete(batchgr)
	}

	@Before(pattern="BatchGRWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('receiver') && !args[0].action?.matches('delete')}", index=10) 
	public void validateReceiver( evt ) {
		if (isProvince()) {
			return
		}
		
		def batchgr = evt.args[0].data
		batchSvc.validateFaases(batchgr)
	}

	@Before(pattern="BatchGRWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('examiner') && !args[0].action?.matches('return.*')}", index=10) 
	public void validateExaminationInfo( evt ) {
		def batchgr = evt.args[0].data
		def findings = examinationSvc.getFindings(batchgr.objid)
		if (!findings)
			throw new Exception('Examination Finding is required.')
	}


	@Before(pattern="BatchGRWorkflowService.signal", eval="#{args[0].state.equalsIgnoreCase('taxmapper') && !args[0].action?.matches('return.*')}", index=10) 
	public void validateTaxmappingInfo( evt ) {
		if (isProvince()) {
			return
		}

		def batchgr = evt.args[0].data

		//check all items are revised
		def unresivedItems = em_batchgr_item.select('tdno')
									.where('parent_objid = :objid AND state <> :state', [objid: batchgr.objid, state: 'REVISED'])
									.orderBy('pin,suffix,subsuffix')
									.list()

		if (unresivedItems) {
			def errors = []
			if (unresivedItems.size() == 1) {
				errors << 'FAAS ' + unresivedItems[0].tdno + ' is not yet revised.'
			}
			else {
				errors << 'The following items are not yet revised:'
				def tdnos = []
				unresivedItems.eachWithIndex { item, idx ->
					if ((idx+1) % 3 == 0) {
						tdnos << item.tdno
						errors << '    * ' + tdnos.join(', ')
						tdnos.clear();
					} else {
						tdnos << item.tdno
					}
				}
				if (tdnos) {
					errors << '    * ' + tdnos.join(', ')
				}
			}
			throw new Exception(errors.join('\n'))
		}
	}

	def isProvince() {
		def org = em_org.find([root: 1]).first()
		return 'PROVINCE'.equalsIgnoreCase(org.orgclass)
	}
}

