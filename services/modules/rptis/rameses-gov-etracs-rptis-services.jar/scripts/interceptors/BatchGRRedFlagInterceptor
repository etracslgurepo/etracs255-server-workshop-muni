import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class BatchGRRedFlagInterceptor
{
	@Service('BatchGRService')
	def svc 

	@DataContext('batchgr_task') 
  def em_task

	@After(pattern="RPTRedFlagService.getEntity", index=2)
	public void afterGetEntity(evt){
		def redflag = evt.args[0]
		def entity  = evt.result 
		if (!entity.objid){
			try{
				def s = svc.open([objid:redflag.refid])
				entity.putAll(s)
			}
			catch(e){
				//ignore 
			}
		}
	}

	@After(pattern="RPTRedFlagService.getCurrentTask", index=1)
	public void afterGetCurrentTask(evt){
		def redflag = evt.args[0]
		def task = evt.result 
		if (!task.objid){
            def opentask = em_task.find([refid: redflag.refid]).where('enddate is null').first();
            if (opentask) {
                opentask.filetype = 'batchgr'
				task.putAll(opentask)
            }
		}
	}	

	@After(pattern="RPTRedFlagService.getCurrentParentTask", index=1, eval="#{args[0]?.info?.parentschema == 'batchgr'}")
	public void afterGetCurrentParentTask(evt){
		def redflag = evt.args[0]
		def task = evt.result 
		if (!task.objid){
            def opentask = em_task.find([refid: redflag.parentid]).where('enddate is null').first();
            if (opentask) {
                opentask.filetype = 'batchgr'
				task.putAll(opentask)
            }
		}
	}	

}

