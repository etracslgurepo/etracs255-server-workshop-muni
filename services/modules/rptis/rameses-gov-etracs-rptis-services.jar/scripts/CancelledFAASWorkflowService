import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


class CancelledFAASWorkflowService extends ActiveWorkflowService
{
	@ActiveDB('cancelledfaas_task')
	def taskDB;

	@DataContext('cancelledfaas_task')
	def em_task

	@Service('NotificationService')
	def notificationService

	@Service('CancelledFAASService')
	def faasSvc

	String processname = 'cancelledfaas'


	@ProxyMethod
	public def findReturnToInfo( param ) {
		return taskDB.findReturnToInfo(param)	
	}

	public void beforeSignal(param) {
		if (param.action?.matches('send.*')) {
			def task = em_task.select('returnedby').find([objid: param.taskid]).first()
			if (!task) throw new Exception('Task ' + param.taskid + ' does not exist or has been deleted.')
			env.task = [returnedby: task.returnedby]
		}
	}	

	public void beforeCreateTask(task) {
		def assignee = [objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE]
		if (task.assignee) {
			assignee = task.assignee
			env.target = [
				assignee: assignee,
				refid: task.refid,
				sender: task.assignee
			] 
		}

		if ( env.action?.matches('return.*')){
			def returnto = findReturnToInfo(task)
			if (!returnto) 
				throw new Exception('This document did not pass from ' + task.state + '.\nReturn task to another personnel.')

			env.returnto = returnto.assignee
			task.assignee = assignee
			task.returnedby = env.prevtask.state
		}
		else if ( ! task.state.toLowerCase().matches('assign.*')){
			task.assignee = assignee
		}
	}

	public void afterCreateTask(task){
		def msg = '';
		if (task.state.matches('assign.*'))
			msg = 'Cancelled FAAS is already submitted ' + task.title + '.'
		else
			msg = 'Cancelled FAAS is currently for ' + task.title + ' by ' + task.assignee.name + '.'

		if (env.target) {
			env.target.taskid = task.objid 
			env.target.tdno = env.data.tdno
		}			
	}
	

	public void afterOpenTask(task) {
		if (task.state.matches('assign.*'))
			task.owner = true 

		task.data = faasSvc.open([objid:task.refid])
		removeUserNotification(task)
	}

	public void afterLoadTask(Object newTask) {
		newTask.transitions.findAll{ it.action.toString().matches('submit.*|send.*')}.each{t ->
			if (t.properties?.targetrole) {
				def params = [role: t.properties.targetrole]
				t.assignees = taskDB.getTargetAssignees(params)
			}
		}
	}


	public void afterCloseTask(task){
		faasSvc.updateSignatoryInfo(task)
	}

	void removeUserNotification(task){
		if (task.assignee?.objid == env.USERID )
			removeNotification(task)
	}

	def getNotificationMessage(task){
		if (task?.state?.matches('assign.*')){
			return notifyGroup(task)
		}
		else if (env.action?.matches('return.*')){
			return notifyAssignee(task)
		}
		else if (env.prevtask?.state.matches('assign.*')){
			removeNotification(task)
		}
		else if (env.target) {
			return notifyTargetAssignee()	
		}
	}


	void removeNotification(task) {
        notificationService.removeMessage([objid:task.refid])
	}


	def notifyGroup(task){
		def cancelledfaas = env.data 
        return [
            objid     		: task.refid,
            senderid  		: env.prevtask?.actor?.objid,
            sender    		: env.prevtask?.actor?.name,
            recipientid   	: task.state,
            recipienttype 	: 'group',
            message   		: 'FAAS No. ' + ( cancelledfaas.tdno ? cancelledfaas.tdno : cancelledfaas.utdno ) + '    (' + task.state + ')',
            filetype  		: 'cancelledfaas',
            data 	  		: [taskid: task.objid],
        ]
	}

	def notifyAssignee( task ) {
		def cancelledfaas = env.data 
		taskDB.updateTaskAssignee([
			objid 			: task.objid, 
			assigneeid 		: env.returnto.objid,
			assigneename 	: env.returnto.name,
			assigneetitle 	: env.returnto.title
		])

        return [
            objid     : task.refid,
            recipientid : (env.returnto ? env.returnto.objid : task.assignee.objid),
            recipienttype : 'user',
            senderid  : task.assignee.objid,
            sender    : task.assignee.name,
            message   : 'FAAS No. ' + ( cancelledfaas.tdno ? cancelledfaas.tdno : cancelledfaas.utdno ) + '   was resent by ' + env.prevtask?.actor?.name,
            filetype  : 'cancelledfaas',
            data 	  : [taskid: task.objid],
        ]
	}

	def notifyTargetAssignee() {
		def target = env.target 
        return [
            objid     : target.refid,
            recipientid : target.assignee?.objid,
            recipienttype : 'user',
            senderid  : env.prevtask?.actor?.objid,
            sender    : env.prevtask?.actor?.name,
            message   : 'FAAS No. ' + target.tdno + '   was submitted by ' + env.prevtask?.actor?.name,
            filetype  : 'cancelledfaas',
            data 	  : [taskid: target.taskid],
        ]
	}

}

