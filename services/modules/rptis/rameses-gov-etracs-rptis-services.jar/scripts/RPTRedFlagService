import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

public class RPTRedFlagService
{
	@Env
	def env

	@ActiveDB('rpt_redflag')
	def em

	@Service('SequenceService')
	def seqSvc 

	@Service('DateService')
	def dtSvc 

	def STATE_OPEN = 'OPEN'
	def STATE_RESOLVED = 'RESOLVED'
	def STATE_CLOSED = 'CLOSED'


	@ProxyMethod
	public def getList(params) {
		if (!params.state) params.state = '%'
		def results = []

		def list = em.getList(params)	
		if (list) results += list 

		list = em.getListFromSubdivision(params)
		if (list) results += list 

		list = em.getListFromConsolidation(params)
		if (list) results += list 
		return results.sort{ a, b -> b.caseno <=> a.caseno } 
	}

	@ProxyMethod
	public def getLookup( params ) {
		params.searchtext = (params.searchtext ? params.searchtext : '') + '%'
		return em.getLookup(params)	
	}

	@ProxyMethod
	public def getOpenRedflagCount(entity) {
		def list = getList([parentid:entity.objid])
		return list.findAll{it.state == 'OPEN'}.size();
	}

	@ProxyMethod
	public def create( entity ) {
		entity.state = STATE_OPEN
		if (!entity.caseno){
			entity.caseno = getNextSeries(entity)
		}
		if (!entity.filedby) {
			entity.filedby = [objid: env.USERID, name: env.NAME]
		}
		if (!entity.filedby.date){
			entity.filedby.date = dtSvc.serverDate
		}

		writeInfo(entity)
		em.create(entity)
		return open(entity)
	}

	@ProxyMethod
	public def save( entity ) {
		writeInfo(entity)
		em.save(entity)
		return open(entity)
	}

	@ProxyMethod
	public def open(entity) {
		entity = em.read(entity)
		if (!entity)
			throw new Exception('Record does not exist.')
		readInfo(entity)
		return entity
	}

	@ProxyMethod
	public def openByCaseNo(entity) {
		entity = em.findByCaseNo(entity)
		if (!entity) 
			throw new Exception('Record does not exist.')
		return open(entity)
	}

	// intercepted to return actual entity being redflagged
	@ProxyMethod
	public def getEntity(redflag){
		return [:]
	}

	// intercepted to return specific current task
	@ProxyMethod
	public def getCurrentTask(redflag) {
		return [:]
	}

	@ProxyMethod
	public def getCurrentParentTask(redflag) {
		return [:]
	}


	@ProxyMethod
	public def resolveRedFlag(entity){
		def old = open(entity)
		if (old.state == 'RESOLVED')
			throw new Exception('Red Flag has already been resolved.')
		if (old.state == 'CLOSED')
			throw new Exception('Red Flag has already been closed.')

		entity.state = 'RESOLVED'
		entity.resolvedby = [
			objid : env.USERID,
			name  : env.NAME,
			date  : dtSvc.serverDate,
		]

		return save(entity)
	}

	
	void writeInfo(entity){
		if (!entity.info)
			entity.info = [:]
		entity.info = em.serializer.write(entity.info)
	}

	void readInfo(entity){
		if (!entity.info)
			entity.info = [:]
		else
			entity.info = em.serializer.read(entity.info)
	}

	def getNextSeries(entity){
		def lguid = entity.lguid.replaceAll('-','')
		def key = 'RPTREDFLAG-' + lguid  
		return lguid + seqSvc.getNextFormattedSeries(key)
	}




	
	/*====================================================
	* sync support 
	====================================================*/

	@ProxyMethod
	public def getDataToResolve(redflag) {
		return open(redflag)
	}

	@ProxyMethod
	public def postDataToResolve(redflag) {
		return save(redflag)
	}

	
	@ProxyMethod
	public def getResolvedData(redflag) {
		return open(redflag)
	}

	@ProxyMethod
	public void postResolvedData(redflag) {
		save(redflag)
	}

}

