import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


class FAASHistoryService
{
	@Env 
	def env

	@Service('FAASService')
	def faasSvc 

	@DataContext('rpu_history')
	def em_history

	@DataContext('propertyclassification')
	def em_classification


	@ProxyMethod
	public def init(param) {
		def faas = param.faas
		def histories = param.histories
		def latestfaas = histories ? histories.last() : faas

		def entity = [:]
		entity.state = 'DRAFT'
		entity.effectivityqtr = 1
		entity.prevtdno = latestfaas.tdno
		entity.pin = latestfaas.fullpin
		entity.owner = latestfaas.owner
		entity.administrator = latestfaas.administrator
		entity.beneficiary = latestfaas.beneficiary
		entity.titleno = latestfaas.titleno
		entity.titledate = latestfaas.titledate
		entity.cadastrallotno = latestfaas.cadastrallotno
		entity.surveyno = latestfaas.surveyno
		entity.blockno = latestfaas.blockno
		entity.portionof = latestfaas.portionof
		entity.totalareaha = latestfaas.totalareaha
		entity.totalareasqm = latestfaas.totalareasqm
		entity.cancelreason = faasSvc.getTxnType(latestfaas.txntype.objid)
		entity.canceldate = latestfaas.dtapproved
		entity.cancelledbytdnos = latestfaas.tdno
		def rpumasterid = latestfaas.rpumaster?.objid ? latestfaas.rpumaster.objid : latestfaas.rpu?.rpumasterid
		entity.rpumaster = [objid: rpumasterid]
		entity.prevhistory = [objid: latestfaas.objid]
		println 'entity.rpumaster => ' + entity.rpumaster
		return entity
	}


	@ProxyMethod
	public def create(entity) {
		def txntype = entity.txntype
		def cancelreason = entity.cancelreason
		entity.cancelreason = cancelreason.objid
		entity = em_history.create(entity)
		entity.cancelreason = cancelreason
		return entity
	}

	@ProxyMethod
	public def open(entity) {
		entity = em_history.read(entity)
		if (!entity) throw new Exception('History does not exist or has already been deleted.')
		entity.cancelreason = faasSvc.getTxnType(entity.cancelreason)
		entity.txntype = faasSvc.getTxnType(entity.txntype.objid)
		entity.classification = em_classification.find([objid: entity.classification.objid]).first()
		return entity
	}

	@ProxyMethod
	public def update(entity) {
		def txntype = entity.txntype
		def cancelreason = entity.cancelreason
		entity.cancelreason = cancelreason.objid
		entity = em_history.update(entity)
		entity.cancelreason = cancelreason
		return entity
	}

	@ProxyMethod
	public def approve(entity) {
		def draftHistory = em_history
			.find([state: 'DRAFT', rpumaster_objid: entity.rpumaster.objid])
			.where('objid <> :objid AND ry > :ry', entity)
			.first()
		
		if (draftHistory) 
		throw new Exception('Approve TD No. ' + draftHistory.tdno + ' history first before this record.')

		entity.state = 'CANCELLED';
		em_history.find([objid: entity.objid]).update([state: entity.state])
		return entity;
	}
}

