import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;

import rptis.facts.*;
import rptis.actions.*;
import rptis.land.facts.*;
import rptis.land.actions.*;
import rptis.planttree.facts.*;
import rptis.planttree.actions.*;

public class LandAssessmentRuleService  
{
	@Env 
	def env

	@ActiveDB('landrpu')
	def em

	@Resource("RuleService")	
	def ruleSvc

	@ActiveDB("rule")
	def ruleDB

	@Service('NumberService')
	def numSvc

	@Service('DateService')
	def dtSvc

	@Service('RPTUtil')
	def util


	

	String RULESET = "landassessment";

	@ProxyMethod
	public def execute(rpu) throws Exception {
		rpu.assessments = []
		rpu.totalav = 0.0
		def request = [rpu:rpu, variables:[], assessments:[]]; 
		request.facts = createFacts(request);
		request.actions = buildActions( request );

		ruleSvc.execute( RULESET, request.facts, request.actions, 'PRE-ASSESSMENT');
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		def gsum = grps.find{it.name =='AFTER-SUMMARY'}
		if (gsum) grps.remove(gsum)
		grps.each{g ->
			ruleSvc.execute( RULESET, request.facts, request.actions, g.name);
		}

		if (rpu.planttrees){
			request.facts += createPlantTreeFacts(request);

			def ptdruleset = 'planttreeassessment';
			grps = ruleDB.getRulegroups( [ruleset: ptdruleset] );
			grps.each{g ->
				ruleSvc.execute(ptdruleset, request.facts, request.actions, g.name);
			}
		}
		ruleSvc.execute( RULESET, request.facts, request.actions, 'AFTER-SUMMARY');

		rpu.totallandbmv = 0.0
		rpu.totallandmv = 0.0
		rpu.totallandav = 0.0
		rpu.totalplanttreebmv = 0.0
		rpu.totalplanttreemv = 0.0
		rpu.totalplanttreeadjustment = 0.0
		rpu.totalplanttreeav = 0.0
		rpu.totalareaha = 0.0
		rpu.totalareasqm = 0.0
		rpu.totalbmv = 0.0
		rpu.totalmv = 0.0

		def taxables = rpu.landdetails
		if (taxables){
			rpu.totallandav = taxables.assessedvalue.sum()
			rpu.totallandbmv = taxables.basemarketvalue.sum()
			if (rpu.totallandbmv == null) rpu.totallandbmv = 0.0 
			rpu.totallandmv = taxables.marketvalue.sum()
			if (rpu.totallandmv == null)  rpu.totallandmv = 0.0
		}
		if (rpu.planttrees){
			rpu.totalplanttreebmv = rpu.planttrees.basemarketvalue.sum()
			rpu.totalplanttreemv = rpu.planttrees.marketvalue.sum()
			rpu.totalplanttreeadjustment = rpu.planttrees.adjustment.sum()
			rpu.totalplanttreeav = rpu.planttrees.assessedvalue.sum()
		}

		if (rpu.landdetails){
			rpu.totalareaha = numSvc.roundA(rpu.landdetails.areaha.sum(), 6)
			rpu.totalareasqm = numSvc.round(rpu.landdetails.areasqm.sum())
		}
		rpu.totalbmv = rpu.totallandbmv + rpu.totalplanttreebmv

		rpu.totalmv = rpu.assessments.marketvalue.sum()
		if (rpu.totalmv == null) rpu.totalbmv = 0.0
		if (rpu.totalmv == null) rpu.totalmv = 0.0 

		if (rpu.totalav == 0) {
			taxables = rpu.assessments.findAll{it.taxable == true}
			rpu.totalav = taxables.assessedvalue.sum()
			if (rpu.totalav == null) rpu.totalav = 0.0
		}

		rpu.assessments.each{
			def actualuse = em.findLandActualUseInfo(it.actualuse)
			if (!actualuse){
				actualuse = em.findPlantTreeActualUseInfo(it.actualuse)
			}
			it.actualuse = actualuse
			it.classification = em.findClassification(it.classification)
		}

		return rpu;
	}

	def createFacts(request){
		def rpu = request.rpu
		def facts = []

		/*-------------------------------------
		* DATE FACTS
		-------------------------------------*/
		def currDate = dtSvc.serverDate;
		def dt = currDate;
		if (rpu.issuedate){
			dt = java.sql.Date.valueOf( rpu.issuedate );
		}
		facts << new EffectiveDate( dt );
		facts << new CurrentDate(currDate);

		/*-------------------------------------
		* RPU
		-------------------------------------*/
		def rpufact = new rptis.facts.RPU(rpu)
		facts << rpufact
		request.rpufact = rpufact

		/*-------------------------------------
		* LAND DETAILS
		-------------------------------------*/
		rpu.landdetails.each{
			def ld = new LandDetail(rpufact, it)
			facts << ld
			it.actualuseadjustments.each{
				loadAppliedToList(it)
				facts << new LandAdjustment(null, ld, it)
			}
		}

		/*-------------------------------------
		* LAND VALUE ADJUSTMENTS
		-------------------------------------*/
		rpu.landadjustments.each{
			loadAppliedToList(it)
			facts << new LandAdjustment(rpufact, null, it)
		}

		return facts
	}

	void loadAppliedToList(adj){
		adj.appliedtolist = []
		def appliedtolist = em.getAppliedTo(adj.adjustmenttype)
		if (appliedtolist)
			adj.appliedtolist = appliedtolist.collect{it.classification.objid}
	}

	def createPlantTreeFacts(request){
		def rpu = request.rpu
		def facts = []

		rpu.planttrees.each{
			it.adjustmentrate = calcAdjustmentRate(rpu)
			def ptd = new PlantTreeDetail(request.rpufact, it)
			facts << ptd
		}
		return facts
	}	


	def calcAdjustmentRate(rpu){
		//calculate adjustment 
		def adjustmentrate = 0.0
	    
		// get total basemarketvalue for agrilands only 
		def agrilands 		  = rpu.landdetails.findAll{ util.isTrue(it.taxable) && it.actualuse && 
									((it.actualuse?.code?.matches('A|AA|AGR') || it.actualuse?.name?.matches('AGRICULTURAL')) ||
									(it.specificclass?.classification?.code?.matches('A|AA|AGR') || 
										it.specificclass?.classification?.name?.matches('AGRICULTURAL') || 
										it.specificclass?.classification?.objid?.matches('AGRICULTURAL') ))}
		def totallandbmv 	  = agrilands.basemarketvalue.sum()
		def totalvalueadj     = 0.0 
		def totalactualuseadj = 0.0 

		totallandbmv 		= ( totallandbmv ? totallandbmv : 0.0 )
		def totallandadj  	= agrilands.landvalueadjustment.sum() + agrilands.actualuseadjustment.sum() 

		if( totallandbmv > 0.0 && totallandadj != 0.0 ){
			adjustmentrate = ( totallandadj / totallandbmv ) * 100;
		}
		return numSvc.roundA(adjustmentrate,0)
	}


	def buildActions(request) {
		def actions = new RuleAction();
		actions.addCommand( "calc-preassess-info", new CalcPreAssessInfo( request:request, NS:numSvc ));
		actions.addCommand( "calc-bmv", new CalcBaseMarketValue( request:request, NS:numSvc ));
		actions.addCommand( "calc-adj", new CalcAdjustment( request:request, NS:numSvc ));
		actions.addCommand( "update-adj", new UpdateAdjustment( request:request));
		actions.addCommand( "update-landdetail-value-adj", new UpdateLandDetailValueAdjustment( request:request));
		actions.addCommand( "update-landdetail-actualuse-adj", new UpdateLandDetailActualUseAdjustment( request:request));
		actions.addCommand( "update-landdetail-adj", new UpdateLandDetailAdjustment( request:request));
		actions.addCommand( "calc-mv", new CalcMarketValue( request:request, NS:numSvc ));
		actions.addCommand( "calc-al", new CalcAssessLevel( request:request, em:em, NS:numSvc ));
		actions.addCommand( "calc-av", new CalcAssessValue( request:request, NS:numSvc ));
		actions.addCommand( "add-assessment-info", new AddAssessmentInfo( request:request, NS:numSvc));
		actions.addCommand( "recalc-rpuassessment", new CalcRPUAssessValue( request:request, NS:numSvc));
		actions.addCommand( "recalc-rpu-mv", new CalcRPUMarketValue( request:request, NS:numSvc));
		actions.addCommand( "recalc-rpu-totalav", new CalcTotalRPUAssessValue( request:request, NS:numSvc));
		actions.addCommand( "add-derive-var", new AddDeriveVariable( request:request));

		actions.addCommand( "calc-planttree-bmv", new CalcPlantTreeBaseMarketValue( request:request, NS:numSvc ));
		actions.addCommand( "calc-planttree-mv", new CalcPlantTreeMarketValue( request:request));
		actions.addCommand( "calc-planttree-adjustment", new CalcPlantTreeAdjustment( request:request, , NS:numSvc ));
		actions.addCommand( "calc-planttree-av", new CalcPlantTreeAssessValue( request:request));
		actions.addCommand( "add-planttree-assessment-info", new AddPlantTreeAssessmentInfo( request:request, NS:numSvc));
		return actions;
	}
}

