import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*

public class MachRYSettingService
{
    @Env 
    def env 

    @ActiveDB('machrysetting')
    def em

    @DataContext('rysetting_mach')
    def em_mach

    @DataContext('rysetting_mach_assesslevel')
    def em_assesslevel

    @DataContext('rysetting_mach_assesslevel_range')
    def em_assesslevelrange 

    @DataContext('rysetting_mach_forex')
    def em_forex

    @DataContext('rysetting_mach_smv')
    def em_smv

    @DataContext('rysetting_lgu')
    def em_rysettinglgu 

    @DataContext('propertyclassification')
    def em_classification 


    @Service('RPTUtil')
    def util

    @Service('MachRYSettingService')
    def self    
    
    
    @ProxyMethod
    public def getPropertyClassifications(){
        return em_classification.where("state='APPROVED'").orderBy('orderno').list()
    }


    @ProxyMethod
    public def getList( params ) {
        def list = []
        if (params.searchtext) 
            list = em_mach.orderBy('ry').find([ry:params.searchtext]).list()
        else 
            list = em_mach.where('1=1').orderBy('ry').list()
        return list 
    }


    @ProxyMethod
    public def create( entity ) {
        entity.state = 'DRAFT'
        if (entity.ry == null) throw new Exception('Revision year is required.')
        if (entity.ry <= 0) throw new Exception('Revision year must be greater than zero.')

        def exist = em_mach.where('1=1').first()
        if (exist) 
            throw new Exception('A Revision Year setting has already been created.\nUse copy or revise setting instead.')

        em_mach.create(entity )

        //load initial assessment levels
        getPropertyClassifications().each{pc->
            def al = [:]
            al.objid = 'AL' + new java.rmi.server.UID()
            al.machrysettingid = entity.objid 
            al.classification = pc 
            al.code = 'A' + pc.code 
            al.name = pc.name 
            al.fixrate = true 
            al.rate = 0.0
            saveAssessLevel(al)
        }
        return open(entity)
    }
    

    @ProxyMethod 
    public Map open( entity ) {
        entity = em_mach.read(entity)
        if (!entity) throw new Exception('Record does not exist or has already been deleted.')
        entity.type = 'mach'
        return entity
    }

	
    @ProxyMethod
    public def update( entity ) {
        return em_mach.update(entity)
    }


    @ProxyMethod
    public def approve(entity){
        def old = open(entity)
        if ('APPROVED'.equalsIgnoreCase(old.state)){
            return old;
        }
        entity.state = 'APPROVED';
        return update(entity)
    }
    
    
    @ProxyMethod
    public void removeEntity( entity ) {
        def params = [machrysettingid:entity.objid]
        em_assesslevelrange.find(params).delete()
        em_assesslevel.find(params).delete()
        em_forex.find(params).delete()
        em_rysettinglgu.find([rysettingid:entity.objid]).delete()
        em_mach.delete(entity)
    }



    /*-------------------------------------------------------------------
    * ASSESS LEVEL SUPPORT
    -------------------------------------------------------------------*/
    @ProxyMethod
    public def getAssessLevels(entity){
        return em_assesslevel.find([machrysettingid:entity.objid])
                .orderBy('classification.orderno, code')
                .list()
                .each{ it.fixrate = util.toBoolean(it.fixrate, true)}
    }

    @ProxyMethod
    public def saveAssessLevel( al ){
        if (util.isTrue(al.fixrate)){
            em_assesslevelrange.find([machassesslevelid:al.objid]).delete()
        }
        return em_assesslevel.save(al)
    }


    @ProxyMethod
    public void removeAssessLevel(al) {
        em_assesslevelrange.find([machassesslevelid:al.objid]).delete()
        em_assesslevel.delete(al)
    }

    @ProxyMethod
    public def getRanges(al){
        return em_assesslevelrange
                    .find([machassesslevelid:al.objid])
                    .orderBy('mvfrom')
                    .list()
    }

    @ProxyMethod
    public def saveRange( range ){
        return em_assesslevelrange.save(range)
    }

    @ProxyMethod
    public void deleteRange( range ){
        em_assesslevelrange.delete(range)
    }


    /*----------------------------------------------------------
    * Forex Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveForex( forex ) {
        def dup = em_forex.where('machrysettingid = :machrysettingid and year = :year and objid <> :objid', forex).first();
        if (dup) throw new Exception('Duplicate year is not allowed.')
        em_forex.save(forex)
    }
    

    @ProxyMethod
    public void deleteForex( forex ) {
        em_forex.delete(forex)
    }
    
    @ProxyMethod
    public List getForexes(setting)  {
        return  em_forex.find([machrysettingid:setting.objid]).orderBy('year').list()
    }

    @ProxyMethod
    public List getMachineSmvs(setting)  {
        return  em_smv.find([parent_objid:setting.objid]).list()
    }
    



    /*----------------------------------------------------------
    * Copy and Revise Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public Map copy(setting) {
        def newsetting = em_mach.read(setting)
        if (!newsetting) throw new Exception('Setting does not exist or has already been deleted.')

        newsetting.objid = util.generateId('LS')
        newsetting.appliedto = null
        newsetting.previd = null
        em_mach.create( newsetting )
        copyAssessLevels( newsetting, setting, false )
        copyForexes(newsetting, setting, false)
        copyMachineSmvs(newsetting, setting, false)
        return open( setting )
    }
    

    @ProxyMethod
    public Map revise( oldsetting, params ) {
        if (params.ry <= oldsetting.ry) 
            throw new Exception('New Revision Year must be greater than ' + oldsetting.ry + '.')

        def settings = em_mach.find([ry:oldsetting.ry]).list() 
        if( !settings ) throw new Exception('Revision Year ' + oldsetting.ry  + ' settings are not defined.')
        
        settings.each{ setting ->
            def newsetting = em_mach.read(setting)
            newsetting.objid = util.generateId('LS')
            newsetting.previd = setting.objid 
            newsetting.ry = params.ry  
            em_mach.create(newsetting )
            copyAssessLevels( newsetting, setting, true )
            copyForexes(newsetting, setting, true)
            copyMachineSmvs(newsetting, setting, true)
            copyLgus(newsetting, setting)
        }
        return [:];
    }
    

    void copyAssessLevels( newsetting, setting, updateprevid ) {
        def assesslevels = getAssessLevels( setting )
        assesslevels.each { al ->
            def ranges = getRanges(al)
            al.previd = (updateprevid ? al.objid : null)
            al.objid = util.generateId('AL')
            al.machrysettingid = newsetting.objid 
            al.fixrate = util.toBoolean(al.fixrate , true)
            saveAssessLevel( al )

            ranges.each{ range ->
                range.previd = (updateprevid ? range.objid : null)
                range.objid = util.generateId('RA')
                range.machassesslevelid = al.objid 
                range.machrysettingid = newsetting.objid 
                saveRange( range )
            }
        }
    }

    void copyForexes(newsetting, setting, updateprevid){
        getForexes( setting ).each{
            it.previd           = (updateprevid ? it.objid : null)
            it.objid            = util.generateId('MF')
            it.machrysettingid  = newsetting.objid 
            saveForex( it )
        }
    }

    void copyMachineSmvs(newsetting, setting, updateprevid) {
        getMachineSmvs( setting ).each{
            it.previd           = (updateprevid ? it.objid : null)
            it.objid            = util.generateId('MS')
            it.parent  = [objid: newsetting.objid]
            em_smv.save(it)
        }
    }

    void copyLgus(newsetting, setting){
        def lgus = em_rysettinglgu.find([rysettingid:setting.objid]).list()
        lgus.each{
            it.objid = 'RL' + new java.rmi.server.UID()
            it.rysettingid = newsetting.objid 
            em_rysettinglgu.create(it)
        }
    }    


    
    /*----------------------------------------------------------
    * Miscellaneous Support Methods
    ----------------------------------------------------------*/
    @Async
    @ProxyMethod
    public def exportData(setting) {
        return getFullData(setting);
    }

    @ProxyMethod
    public def getFullData(setting) {
        setting = open(setting);
        setting.type = 'mach';
        setting.levels = getAssessLevels(setting);
        setting.ranges = [];
        setting.levels.each{
            setting.ranges += getRanges(it);
        }
        setting.forexes = getForexes(setting);
        setting.lgus = em_rysettinglgu.find([rysettingid:setting.objid]).list()
        setting.smvs = em_smv.find([parent_objid: setting.objid]).list()
        return setting
    }


    @Async
    @ProxyMethod
    public def importData(setting) {
        if (setting.type != 'mach')
            throw new Exception('Invalid data. Imported data is for ' + setting.type.toUpperCase() + ' setting.');
        sync([setting])
    }


    @ProxyMethod
    public getSettingForSync(params) {
        params.lguid = params.lgu.orgid
        def settings = []
        em.getSettingsForSync(params).each{setting -> 
            settings << getFullData(setting)
        }
        return [name: 'mach', type: 'mach', items: settings]
    }

    @ProxyMethod
    public void syncSetting(setting) {
        sync(setting.items)
    }


    /*----------------------------------------------------------
    * SYNC support
    ----------------------------------------------------------*/
    @ProxyMethod
    public void sync( settings ) {
        settings.each{ setting ->
            em_mach.save(setting)

            setting.lgus.each{
                em_rysettinglgu.save(it)
            }

            setting.levels.each{lvl -> 
                saveAssessLevel(lvl)
                lvl.ranges.each{ range ->
                    saveRange(range)
                }
            }

            setting.forexes.each{
                saveForex(it)
            }

            setting.smvs.each{
                em_smv.save(it)
            }
        }
    }


    /*---------------------------------------------------------
    *
    * @DEPRECATED 
    *
    ---------------------------------------------------------*/
    @ProxyMethod
    public void syncData( msg ) {
        if (msg.msgtype == 'machrysetting'){
            em_mach.save( msg.data )
            msg.data.lgus = em_rysettinglgu.find([rysettingid:msg.data.objid, lguid: env.ORGID]).list()
            if (!msg.data.lgus){
                msg.data.lgus << [
                    objid: 'RSL' + new java.rmi.server.UID(),
                    rysettingid: msg.data.objid,
                    lguid: env.ORGID,
                    barangayid: null,
                    lguname: env.ORGNAME,
                    settingtype: 'land',
                ]
            }
            msg.data.lgus?.each{
                em_rysettinglgu.save(it)
            }
        }
        else if (msg.msgtype == 'assesslevels'){
            msg.data.each{ lvl ->
                saveAssessLevel(lvl)
                lvl.ranges.each{ range ->
                    saveRange(range)
                }
            }
        }
        else if (msg.msgtype == 'forexes'){
            msg.data.each{
                saveForex(it)
            }
        }
    }

}
