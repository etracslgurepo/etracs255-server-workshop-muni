import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*

public class BldgRYSettingService
{
    @Env 
    def env 
    
    @ActiveDB('bldgrysetting')
    def em

    @DataContext('rysetting_bldg')
    def em_bldg

    @DataContext('rysetting_bldg_assesslevel')
    def em_assesslevel

    @DataContext('rysetting_bldg_assesslevel_range')
    def em_assesslevelrange 

    @DataContext('rysetting_bldg_type')
    def em_bldgtype

    @DataContext('rysetting_bldg_bucc')
    def em_bucc

    @DataContext('rysetting_bldg_depreciation')
    def em_depreciation

    @DataContext('rysetting_bldg_additionalitem')
    def em_additionalitem

    @DataContext('rysetting_lgu')
    def em_rysettinglgu 

    @DataContext('propertyclassification')
    def em_classification 

    @DataContext('bldgkind')
    def em_bldgkind 

    @DataContext('rysetting_bldgtype_storeyadjustment')
    def em_storeyadjustment 

    @DataContext('rysetting_bldgtype_storeyadjustment_bldgkind')
    def em_storeyadjustment_bldgkind

    @Service('RPTUtil')
    def util    

    @Service('BldgRYSettingService')
    def self


    @ProxyMethod
    public def getList( params ) {
        def list = []
        if (params.searchtext) 
            list = em_bldg.orderBy('ry').find([ry:params.searchtext]).list()
        else 
            list = em_bldg.where('1=1').orderBy('ry').list()
        return list 
    }
    
     
    @ProxyMethod
    public def create( entity ) {
        entity.state = 'DRAFT'
        if (entity.ry == null) throw new Exception('Revision year is required.')
        if (entity.ry <= 0) throw new Exception('Revision year must be greater than zero.')

        def exist = em_bldg.where('1=1').first()
        if (exist) 
            throw new Exception('A Revision Year setting has already been created.\nUse copy or revise setting instead.')

        em_bldg.create(entity )

        //load initial assessment levels
        getPropertyClassifications().each{pc->
            def al = [:]
            al.objid = 'AL' + new java.rmi.server.UID()
            al.bldgrysettingid = entity.objid 
            al.classification = pc 
            al.code = 'A' + pc.code 
            al.name = pc.name 
            al.fixrate = false
            al.rate = 0.0 
            saveAssessLevel(al)
        }
        return open(entity)
    }

    @ProxyMethod
    public def update(entity){
        return  em_bldg.update(entity)
    }

    

    @ProxyMethod 
    public Map open( entity ) {
        entity = em_bldg.read(entity)
        if (!entity) throw new Exception('Record does not exist or has already been deleted.')
        entity.type = 'bldg'
        return entity
    }
    

    @ProxyMethod
    public void removeEntity( entity ) {
        def params = [bldgrysettingid:entity.objid]
        em_assesslevelrange.find(params).delete()
        em_assesslevel.find(params).delete()
        em_additionalitem.find(params).delete()
        em_depreciation.find(params).delete()
        em_bucc.find(params).delete()
        em_storeyadjustment_bldgkind.find(params).delete()
        em_storeyadjustment.find(params).delete()
        em_bldgtype.find(params).delete()
        em_rysettinglgu.find([rysettingid:entity.objid]).delete()
        em_bldg.delete(entity)
    }

    
    
    /*----------------------------------------------------------
    * AssessLevel Support
    ----------------------------------------------------------*/
    @ProxyMethod
    public def getAssessLevels(entity){
        return em_assesslevel.find([bldgrysettingid:entity.objid])
                .orderBy('classification.orderno, code')
                .list()
                .each{ it.fixrate = util.toBoolean(it.fixrate, false)}
    }

    @ProxyMethod
    public def saveAssessLevel( al ){
        if (util.isTrue(al.fixrate)){
            em_assesslevelrange.find([bldgassesslevelid:al.objid]).delete()
        }
        return em_assesslevel.save(al)
    }


    @ProxyMethod
    public void removeAssessLevel(al) {
        em_assesslevelrange.find([bldgassesslevelid:al.objid]).delete()
        em_assesslevel.delete(al)
    }

    @ProxyMethod
    public def getRanges(al){
        return em_assesslevelrange
                    .find([bldgassesslevelid:al.objid])
                    .orderBy('mvfrom')
                    .list()
    }

    @ProxyMethod
    public def saveRange( range ){
        return em_assesslevelrange.save(range)
    }

    @ProxyMethod
    public void deleteRange( range ){
        em_assesslevelrange.delete(range)
    }




    /*----------------------------------------------------------
    * AdditionalItem Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveAdditionalItem( item ) {
        em_additionalitem.save(item)
    }

    
    @ProxyMethod
    public void deleteAdditionalItem( item ) {
        em_additionalitem.delete(item)
    }


    @ProxyMethod
    public def getAdditionalItems( setting ){
        return em_additionalitem.find([bldgrysettingid:setting.objid]).orderBy('code').list()
    }

    @ProxyMethod
    public def searchAdditionalItems( params ){
        if (!params.searchtext) params.searchtext = '%'
        params.searchtext += '%'
        params.code = params.searchtext
        params.name= params.searchtext
        return em_additionalitem.where('bldgrysettingid = :bldgrysettingid and (code like :code or name like :name)', params)
                                    .orderBy('code').list()
    }
    
    
    /*----------------------------------------------------------
    * BldgType Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveBldgType( bldgtype ) {
        em_bldgtype.save(bldgtype)
    }

    
    @ProxyMethod
    public void deleteBldgType( bldgtype ) {
        def params = [bldgtypeid:bldgtype.objid]
        em_bucc.find(params).delete()
        em_depreciation.find(params).delete()
        em_bldgtype.delete(bldgtype)
    }
    

    @ProxyMethod
    public def getBldgTypes( setting) {
        return em_bldgtype.find([bldgrysettingid:setting.objid])
                        .orderBy('code')
                        .list()
    }

    
    /*----------------------------------------------------------
    * BldgKindBucc Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveBldgKindBucc( bldgkindbucc ) {
        em_bucc.save(bldgkindbucc)
    }

    
    @ProxyMethod
    public void deleteBldgKindBucc( bldgkindbucc ) {
        em_bucc.delete(bldgkindbucc)
    }

    
    @ProxyMethod
    public List getBldgKindBuccs( bldgtype) {
        return em_bucc.find([bldgtypeid:bldgtype.objid]).orderBy('bldgkind.code').list()
    }

    @ProxyMethod
    public def searchBldgKindBuccs( params ) {
        if (!params.searchtext) params.searchtext = '%'
        params.searchtext += '%'
        return em_bucc.where('bldgtypeid = :bldgtypeid and (bldgkind.code like :searchtext or bldgkind.name like :searchtext)', params).orderBy('bldgkind.code').list()
    }


    /*----------------------------------------------------------
    * DEPRECIATIONS Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveDepreciation( depreciation ) {
        em_depreciation.save(depreciation)
    }

    
    @ProxyMethod
    public void deleteDepreciation( depreciation ) {
        em_depreciation.delete(depreciation)
    }

    
    @ProxyMethod
    public List getDepreciations( bldgtype ) {
        return em_depreciation.find([bldgtypeid:bldgtype.objid]).orderBy('agefrom')?.list()
    }


    /*----------------------------------------------------------
    * Storey Adjustments
    ----------------------------------------------------------*/
    @ProxyMethod
    public def saveStoreyAdjustment(adjustment) {
        return em_storeyadjustment.save(adjustment)
    }

    @ProxyMethod
    public void deleteStoreyAdjustment(adjustment) {
        em_storeyadjustment_bldgkind.find([parentid: adjustment.objid]).delete()
        em_storeyadjustment.find([objid: adjustment.objid]).delete()
    }

    @ProxyMethod
    public def getStoreyAdjustments(bldgtype) {
        if (!bldgtype) return []

        return em_storeyadjustment
                .find([bldgtypeid: bldgtype.objid])
                .orderBy('floorno,rate')
                .list()
    }

    @ProxyMethod
    public void clearStoreyAdjustments(bldgtype) {
        saveBldgType(bldgtype);
        em_storeyadjustment_bldgkind.find([bldgtypeid: bldgtype.objid]).delete();
        em_storeyadjustment.find([bldgtypeid: bldgtype.objid]).delete();
    }

    @ProxyMethod
    public def getStoreyAdjustmentBldgKinds(storeyadj) {
        if (!storeyadj) return []

        return em_storeyadjustment_bldgkind
                .find([parentid: storeyadj.objid])
                .orderBy('bldgkind.name')
                .list()
    }

    @ProxyMethod
    public def saveStoreyAdjustmentBldgKind(bldgkind) {
        def item = em_storeyadjustment_bldgkind
                .where(['bldgtypeid = :bldgtypeid and floorno = :floorno and bldgkindid = :bldgkindid', bldgkind]).first()
        if (item) {
            throw new Exception('Building has already been added to Floor ' + bldgkind.floorno + ' with Rate ' + item.parent.rate  )
        }
        return em_storeyadjustment_bldgkind.save(bldgkind)
    }

    @ProxyMethod
    public def deleteStoreyAdjustmentBldgKind(bldgkind) {
        return em_storeyadjustment_bldgkind.find([objid: bldgkind.objid]).delete()
    }

    void deleteInvalidStoreyAdjustmentBldgKinds(entity) {
        em_bldgtype
            .find([bldgrysettingid: entity.objid, storeyadjtype: 'bytype'])
            .list()
            .each{
                em_storeyadjustment_bldgkind.find([bldgtypeid: it.objid]).delete()
            }

    }


    /*----------------------------------------------------------
    * Copy and Revision Support
    ----------------------------------------------------------*/

    @ProxyMethod
    public def getPropertyClassifications(){
        return em_classification.where("state='APPROVED'").orderBy('orderno').list()
    }


    @ProxyMethod
    public void copy(setting) {
        def newsetting = em_bldg.read(setting)
        if (!newsetting) throw new Exception('Setting does not exist or has already been deleted.')

        newsetting.objid = util.generateId('BS')
        newsetting.appliedto = null
        newsetting.previd = null
        em_bldg.create( newsetting )
        copyAssessLevels( newsetting, setting, false )
        copyAdditionalItems(newsetting, setting, false )
        copyBldgTypes(newsetting, setting, false )
    }


    @ProxyMethod
    public void revise( oldsetting, params ) {
        if (params.ry <= oldsetting.ry) 
            throw new Exception('New Revision Year must be greater than ' + oldsetting.ry + '.')

        def settings = em_bldg.find([ry:oldsetting.ry]).list() 
        if( !settings ) throw new Exception('Revision Year ' + oldsetting.ry  + ' settings are not defined.')
        
        settings.each{setting->
            def newsetting = em_bldg.read(setting)
            newsetting.objid = util.generateId('BS')
            newsetting.previd = setting.objid 
            newsetting.ry = params.ry  
            em_bldg.create(newsetting )
            copyAssessLevels( newsetting, setting, true )
            copyAdditionalItems(newsetting, setting, true )
            copyBldgTypes(newsetting, setting, true )
            copyLgus(newsetting, setting)
        }
    }

    void copyAssessLevels( newsetting, setting, updateprevid ) {
        def assesslevels = getAssessLevels( setting )
        assesslevels.each { al ->
            def ranges = getRanges(al)
            al.previd = (updateprevid ? al.objid : null)
            al.objid = util.generateId('AL')
            al.bldgrysettingid = newsetting.objid 
            al.fixrate = util.toBoolean(al.fixrate, false)
            saveAssessLevel( al )

            ranges.each{ range ->
                range.previd = (updateprevid ? range.objid : null)
                range.objid = util.generateId('RA')
                range.bldgassesslevelid = al.objid 
                range.bldgrysettingid = newsetting.objid 
                saveRange( range )
            }
        }
    }


    void copyAdditionalItems(newsetting, setting, updateprevid ){
        def additionalitems  = getAdditionalItems( setting )
        additionalitems.each {
            it.previd = (updateprevid ? it.objid : null)
            it.objid = util.generateId('BA')
            it.bldgrysettingid = newsetting.objid 
            saveAdditionalItem( it )
        }
    }

    void copyBldgTypes(newsetting, setting, updateprevid ){
        def bldgtypes = getBldgTypes( setting)
        bldgtypes.each { bt ->
            def oldbt = [objid:bt.objid]
            bt.previd           = (updateprevid ? bt.objid  : null)
            bt.objid            = util.generateId('BA')
            bt.bldgrysettingid  = newsetting.objid 
            saveBldgType( bt )
            
            def buccs = getBldgKindBuccs(oldbt)
            buccs.each { bucc ->
                bucc.previd             = (updateprevid ? bucc.objid  : null)
                bucc.objid              = util.generateId('BU')
                bucc.bldgrysettingid    = newsetting.objid 
                bucc.bldgtypeid         = bt.objid 
                saveBldgKindBucc( bucc )
            }

            def depreciations = getDepreciations(oldbt)
            depreciations.each{
                it.prev             = it.objid 
                it.objid            = util.generateId('BD')
                it.bldgrysettingid  = newsetting.objid 
                it.bldgtypeid       = bt.objid 
                saveDepreciation(it)
            }

            def storeyadjustments = getStoreyAdjustments(oldbt);
            storeyadjustments.each{ storeyadj ->
                storeyadj.previd             = storeyadj.objid 
                storeyadj.objid            = util.generateId('BTM')
                storeyadj.bldgrysettingid  = newsetting.objid 
                storeyadj.bldgtypeid       = bt.objid 
                saveStoreyAdjustment(storeyadj)

                getStoreyAdjustmentBldgKinds([objid: storeyadj.previd]).each {adjbldgkind ->
                    adjbldgkind.objid            = util.generateId('BTMB')
                    adjbldgkind.bldgrysettingid  = newsetting.objid 
                    adjbldgkind.bldgtypeid       = bt.objid 
                    adjbldgkind.parentid       = storeyadj.objid 
                    saveStoreyAdjustmentBldgKind(adjbldgkind)
                }
            }
       }
    }

    void copyLgus(newsetting, setting){
        def lgus = em_rysettinglgu.find([rysettingid:setting.objid]).list()
        lgus.each{
            it.objid = 'RL' + new java.rmi.server.UID()
            it.rysettingid = newsetting.objid 
            em_rysettinglgu.create(it)
        }
    }



    /*----------------------------------------------------------
    * Export and Import Support
    ----------------------------------------------------------*/

    @Async
    @ProxyMethod
    public def exportData(setting) {
        return getFullData(setting)
    }

    @ProxyMethod
    public def getFullData(setting) {
        setting = open(setting);
        setting.type = 'bldg';
        setting.levels = getAssessLevels(setting);
        setting.ranges = [];
        setting.levels.each{
            setting.ranges += getRanges(it);
        }
        setting.additionalitems = getAdditionalItems(setting);
        setting.bldgtypes = getBldgTypes(setting);
        setting.bldgkindbuccs = [];
        setting.depreciations = [];
        setting.storeyadjustments = [];
        setting.storeyadjbldgkinds = [];
        setting.bldgtypes.each{
            setting.bldgkindbuccs += getBldgKindBuccs(it);
            setting.depreciations += getDepreciations(it);
            def storeyadjustments = getStoreyAdjustments(it);
            setting.storeyadjustments = storeyadjustments;
            storeyadjustments.each{storeyadj ->
                setting.storeyadjbldgkinds += getStoreyAdjustmentBldgKinds(storeyadj)
            }
        }
        setting.lgus = em_rysettinglgu.find([rysettingid:setting.objid]).list()
        return setting
    }


    @Async
    @ProxyMethod
    public def importData(setting) {
        if (setting.type != 'bldg')
            throw new Exception('Invalid data. Imported data is for ' + setting.type.toUpperCase() + ' setting.');
        sync([setting])
    }


    @ProxyMethod
    public getSettingForSync(params) {
        params.lguid = params.lgu.orgid
        def settings = []
        em.getSettingsForSync(params).each{setting -> 
            settings << getFullData(setting)
        }
        return [name: 'bldg', type: 'bldg', items: settings]
    }

    @ProxyMethod
    public void syncSetting(setting) {
        sync(setting.items)
    }


    /*----------------------------------------------------------
    * Sync Support
    ----------------------------------------------------------*/
    @ProxyMethod
    public void sync( settings ) {
        settings.each{ setting ->
            em_bldg.save(setting)

            setting.lgus.each{
                em_rysettinglgu.save(it)
            }

            setting.levels.each{lvl -> 
                saveAssessLevel(lvl)
                lvl.ranges.each{ range ->
                    saveRange(range)
                }
            }

            setting.bldgtypes.each{ bt ->
                saveBldgType(bt)
                bt.bldgkindbuccs.each{ 
                    it.bldgkind.state = 'APPROVED'
                    em_bldgkind.save(it.bldgkind)
                    saveBldgKindBucc(it) 
                }
                bt.depreciations.each{ saveDepreciation(it) }
                bt.storeyadjustments.each{ saveStoreyAdjustment(it) }
                bt.storeyadjbldgkinds.each{ saveStoreyAdjustmentBldgKind(it) }
            }

            setting.additionalitems.each{
                def item = em_additionalitem.find([code:it.code]).first()
                if (!item)
                    item = em_additionalitem.find([name:it.name]).first()

                if (item && item.objid != it.objid){
                    it.code += '.'
                    it.name += '.'
                }
                saveAdditionalItem(it)
            }
        }
    }

        
    /*---------------------------------------------------------
    *
    * @DEPRECATED 
    *
    ---------------------------------------------------------*/
    @ProxyMethod
    public void syncData( msg ) {
        if (msg.msgtype == 'bldgrysetting'){
            em_bldg.save( msg.data )
            msg.data.lgus = em_rysettinglgu.find([rysettingid:msg.data.objid, lguid: env.ORGID]).list()
            if (!msg.data.lgus){
                msg.data.lgus << [
                    objid: 'RSL' + new java.rmi.server.UID(),
                    rysettingid: msg.data.objid,
                    lguid: env.ORGID,
                    barangayid: null,
                    lguname: env.ORGNAME,
                    settingtype: 'land',
                ]
            }
            msg.data.lgus?.each{
                em_rysettinglgu.save(it)
            }
        }
        else if (msg.msgtype == 'assesslevels'){
            msg.data.each{ lvl ->
                saveAssessLevel(lvl)
                lvl.ranges.each{ range ->
                    saveRange(range)
                }
            }
        }
        else if (msg.msgtype == 'bldgtypes'){
            msg.data.each{ bt ->
                saveBldgType(bt)
                bt.bldgkindbuccs.each{ 
                    it.bldgkind.state = 'APPROVED'
                    em_bldgkind.save(it.bldgkind)
                    saveBldgKindBucc(it) 
                }
                bt.depreciations.each{ saveDepreciation(it) }
                bt.storeyadjustments.each{ saveStoreyAdjustment(it) }
            }
        }
        else if (msg.msgtype == 'bldgadditionalitems'){
            msg.data.each{
                def item = em_additionalitem.find([code:it.code]).first()
                if (!item)
                    item = em_additionalitem.find([name:it.name]).first()

                if (item && item.objid != it.objid){
                    it.code += '.'
                    it.name += '.'
                }
                saveAdditionalItem(it)
            }
        }
    }
}
