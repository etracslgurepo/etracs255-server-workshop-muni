import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*;
import com.rameses.services.extended.*;

public class PlantTreeRYSettingService
{
    @Env 
    def env 

    @ActiveDB('planttreerysetting')
    def em

    @DataContext('planttree')
    def planttree

    @DataContext('rysetting_planttree')
    def em_planttree

    @DataContext('rysetting_planttree_assesslevel')
    def em_assesslevel

    @DataContext('rysetting_planttree_unitvalue')
    def em_unitvalue

    @DataContext('rysetting_lgu')
    def em_rysettinglgu     

    @DataContext('propertyclassification')
    def em_classification

    @Service('RPTUtil')
    def util 


    @ProxyMethod
    public def getList( params ) {
        def list = []
        if (params.searchtext) 
            list = em_planttree.orderBy('ry').find([ry:params.searchtext]).list()
        else 
            list = em_planttree.where('1=1').orderBy('ry').list()
        return list 
    }

    
    @ProxyMethod
    public def getPlantTrees(params) {
        if (!params.searchtext) params.searchtext = ''
        params.searchtext += '%'
        params.state = 'APPROVED'
        def filter = 'state = :state and (code like :searchtext or name like :searchtext) '
        return planttree.where(filter, params).orderBy('code').list()
    }


    @ProxyMethod
    public def create( entity ) {
        entity.state = 'DRAFT'
        if (entity.ry == null) throw new Exception('Revision year is required.')
        if (entity.ry <= 0) throw new Exception('Revision year must be greater than zero.')

        def exist = em_planttree.where('1=1').first()
        if (exist) 
            throw new Exception('A Revision Year setting has already been created.\nUse copy or revise setting instead.')

        em_planttree.create(entity )
        insertDefaultAssessLevel(entity)
        return open(entity)
    }
    

    @ProxyMethod 
    public Map open( entity ) {
        entity = em_planttree.read(entity)
        if (!entity) throw new Exception('Record does not exist or has already been deleted.')
        entity.type = 'planttree'
        return entity
    }

    
    @ProxyMethod
    public def update( entity ) {
        return em_planttree.update(entity)
    }
    
    
    @ProxyMethod
    public void removeEntity( entity ) {
        def params = [planttreerysettingid:entity.objid]
        em_assesslevel.find(params).delete()
        em_unitvalue.find(params).delete()
        em_rysettinglgu.find([rysettingid:entity.objid]).delete()
        em_planttree.delete(entity)
    }


    @ProxyMethod
    public def approve( entity ) {
        def old = open(entity)
        if ('APPROVED'.equalsIgnoreCase(old.state)){
            return old;
        }
        entity.state = 'APPROVED';
        return update(entity)
    }
    

    /*----------------------------------------------------------
    * AssessLevel Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public def saveAssessLevel( assesslevel ) {
        em_assesslevel.save(assesslevel)
    }
    

    @ProxyMethod
    public void removeAssessLevel( assesslevel ) {
        em_assesslevel.delete(assesslevel)
    }
    

    @ProxyMethod
    public List getAssessLevels( entity )  {
        return em_assesslevel.find([planttreerysettingid:entity.objid])
                .orderBy('classification.orderno, code')
                .list()
                .each{ it.fixrate = (it.fixrate == 1)}
    }
    

    @ProxyMethod
    public def getRanges(al) {
        return []
    }


    /*----------------------------------------------------------
    * UnitValue Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public def saveUnitValue( unitvalue ) {
        em_unitvalue.save(unitvalue)
    }
    

    @ProxyMethod
    public void deleteUnitValue( unitvalue ) {
        em_unitvalue.delete(unitvalue)
    }
    

    @ProxyMethod
    public List getUnitValues( setting, planttree )  {
        def params = [:]
        params.planttreerysettingid = setting.objid 
        params.planttreeid = (planttree ? planttree.objid : '%')
        def filter = "planttreerysettingid = :planttreerysettingid and planttree_objid like :planttreeid "
        return  em_unitvalue.where(filter, params).orderBy('planttree.code, code').list()
    }
    


    /*----------------------------------------------------------
    * COPY AND REVISION support
    ----------------------------------------------------------*/
    @ProxyMethod
    public Map copy(setting) {
        def newsetting = em_planttree.read(setting)
        if (!newsetting) throw new Exception('Setting does not exist or has already been deleted.')

        newsetting.objid = util.generateId('LS')
        newsetting.appliedto = null
        newsetting.previd = null
        em_planttree.create( newsetting )
        copyAssessLevels( newsetting, setting, false )
        copyUnitValues(newsetting, setting, false)
        return open( setting )
    }
    

    @ProxyMethod
    public Map revise( oldsetting, params) {
        if (params.ry <= oldsetting.ry) 
            throw new Exception('New Revision Year must be greater than ' + oldsetting.ry + '.')

        def settings = em_planttree.find([ry:oldsetting.ry]).list() 
        if( !settings ) throw new Exception('Revision Year ' + oldsetting.ry  + ' settings are not defined.')
        
        settings.each{ setting ->
            def newsetting = em_planttree.read(setting)
            newsetting.objid = util.generateId('LS')
            newsetting.previd = setting.objid 
            newsetting.ry = params.ry  
            em_planttree.create(newsetting )
            copyAssessLevels( newsetting, setting, true)
            copyUnitValues(newsetting, setting, true)
            copyLgus(newsetting, setting)
        }
        return [:]
    }


    void copyAssessLevels(newsetting, setting, updateprevid){
        getAssessLevels( setting ).each{
            it.previd  = (updateprevid ? it.objid : null)
            it.objid   = util.generateId('AL')
            it.planttreerysettingid  = newsetting.objid 
            saveAssessLevel( it )
        }
    }

    void copyUnitValues(newsetting, setting, updateprevid){
        getPlantTrees([:]).each{pt ->
            getUnitValues( setting, pt).each{ uv ->
                uv.previd   = (updateprevid ? uv.objid : null)
                uv.objid    = util.generateId('UV')
                uv.planttreerysettingid  = newsetting.objid 
                saveUnitValue( uv );
            }
        }
    }

    void copyLgus(newsetting, setting){
        def lgus = em_rysettinglgu.find([rysettingid:setting.objid]).list()
        lgus.each{
            it.objid = 'RL' + new java.rmi.server.UID()
            it.rysettingid = newsetting.objid 
            em_rysettinglgu.create(it)
        }
    }    



    /*----------------------------------------------------------
    * Miscellaneous Support
    ----------------------------------------------------------*/
    @Async
    @ProxyMethod
    public def exportData(setting) {
        return getFullData(setting)
    }

    @ProxyMethod
    public def getFullData(setting) {
        setting = open(setting);
        setting.type = 'planttree';
        setting.levels = getAssessLevels(setting);
        setting.unitvalues = getUnitValues(setting, null);
        setting.lgus = em_rysettinglgu.find([rysettingid:setting.objid]).list()
        return setting
    }

    @Async
    @ProxyMethod
    public def importData(setting) {
        if (setting.type != 'planttree')
            throw new Exception('Invalid data. Imported data is for ' + setting.type.toUpperCase() + ' setting.');
        sync([setting])
    }

    @ProxyMethod
    public getSettingForSync(params) {
        params.lguid = params.lgu.orgid
        def settings = []
        em.getSettingsForSync(params).each{setting -> 
            settings << getFullData(setting)
        }
        return [name: 'planttree', type: 'planttree', items: settings]
    }

    @ProxyMethod
    public void syncSetting(setting) {
        sync(setting.items)
    }



    /*----------------------------------------------------------
    * SYNC support
    ----------------------------------------------------------*/
    @ProxyMethod
    public void sync( settings ) {
        settings.each{ setting ->
            em_planttree.save(setting)

            setting.lgus.each{
                em_rysettinglgu.save(it)
            }

            setting.levels.each{
                saveAssessLevel(it)
            }

             setting.unitvalues.each{
                it.planttree.state ='APPROVED'
                planttree.save(it.planttree)
                saveUnitValue(it)
            }
        }
    }


   /*---------------------------------------------------------
    *
    * @DEPRECATED 
    *
    ---------------------------------------------------------*/
    @ProxyMethod
    public void syncData( msg ) {
        if (msg.msgtype == 'planttreerysetting'){
            em_planttree.save( msg.data )
            msg.data.lgus = em_rysettinglgu.find([rysettingid:msg.data.objid, lguid: env.ORGID]).list()
            if (!msg.data.lgus){
                msg.data.lgus << [
                    objid: 'RSL' + new java.rmi.server.UID(),
                    rysettingid: msg.data.objid,
                    lguid: env.ORGID,
                    barangayid: null,
                    lguname: env.ORGNAME,
                    settingtype: 'land',
                ]
            }
            msg.data.lgus?.each{
                em_rysettinglgu.save(it)
            }
        }
        else if (msg.msgtype == 'assesslevels'){
            msg.data.each{
                saveAssessLevel(it)
            }
        }
        else if (msg.msgtype == 'planttreeunitvalues'){
            msg.data.each{
                it.planttree.state ='APPROVED'
                planttree.save(it.planttree)
                saveUnitValue(it)
            }
        }
    }


    void insertDefaultAssessLevel(entity) {
        def agrclass = em_classification.find([name: 'AGRICULTURAL']).first()
        if (!agrclass) {
            agrclass = [code: 'AA', name: 'AGRICULTURAL']
        }

        def al = [:]
        al.objid = 'AL' + new java.rmi.server.UID()
        al.planttreerysettingid = entity.objid 
        al.classification = agrclass
        al.code = agrclass.code 
        al.name = agrclass.name 
        al.fixrate = true 
        al.rate = 0.0 
        al.previd = null 

        em_assesslevel.create(al)
    }

}
