import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportAssessmentRollService
{
    @ActiveDB('rptreport_assessmentroll')
    def em

    @ProxyMethod
    public def getCurrentRy(){
        return em.findCurrentRy()?.ry 
    }


    @Async
    @ProxyMethod
    public def generateAssessmentRollTaxable( params ){
        buildParams(params)
		def list = em.getAssessmentRollTaxable(params)
		if( ! list ) throw new Exception('Records not found.')
		return [reportdata:list]
    }

    
    @Async
    @ProxyMethod
    public def generateAssessmentRollExempt( params ){
        buildParams(params)
		def list = em.getAssessmentRollExempt(params)
		if( ! list ) throw new Exception('Records not found.')
		return [reportdata:list]
    }

    @Async
    @ProxyMethod
    public def generateContinuousAssessmentRoll( params ) {
        buildParams(params)
        def list = em.getContinuousAssessmentRoll(params)
        if( ! list ) throw new Exception('Records not found.')
        return [reportdata:list]
    }

    @Async
    @ProxyMethod
    public def generateContinuousAssessmentRollExempt( params ) {
        buildParams(params)
        def list = em.getContinuousAssessmentRollExempt(params)
        if( ! list ) throw new Exception('Records not found.')
        return [reportdata:list]
    }

    void buildParams(params) {
        params.lguid = (params.lgu ? params.lgu.objid : '%')
        params.barangayid = (params.barangay ? params.barangay.objid : '%')
        params.section = (params.section ? params.section : '%')
    }


}
