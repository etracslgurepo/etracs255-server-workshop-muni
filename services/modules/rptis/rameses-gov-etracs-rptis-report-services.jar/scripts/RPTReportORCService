import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportORCService
{
    @ActiveDB('rptreport_orc')
    def em

	@DataContext('entity')
	def em_entity;

	@DataContext('entityid')
	def em_entityid;

    @Async
	@ProxyMethod
	public def getData( param )  {
		def list = em.getList([taxpayerid: param.taxpayer.objid])
		if( ! list ) throw new Exception('Records not found.')
		list.each{
			if (it.classification.equalsIgnoreCase('AGRICULTURAL')) {
				it.area = it.totalareaha;
				it.areatype = 'ha';
			} else {
				it.area = it.totalareasqm;
				it.areatype = 'sqm';
			}
			it.kind = it.rputype[0].toUpperCase();
			it.taxpayer.address = it.taxpayer.address?.replaceAll("\n", " ");
			it.taxpayer.contactno = buildContactNo(it);
			it.taxpayer.tin = em_entityid.select('idno').find([entityid: it.taxpayerid, idtype: 'TIN']).val();
		}

		for(int i = list.size() - 1; i >= 0; i--) {
			def curritem = list[i];
			def previtem = list.find{it.tdno == curritem.prevtdno}
			if (previtem && 'CANCELLED'.equalsIgnoreCase(previtem.state)) {
				previtem.remarks = previtem.state + ' BY\n'
				previtem.remarks += curritem.tdno + ' (' + curritem.txntype.objid + ')'
			}
		}

		list[0].dtprepared = list.dtapproved.min();
		return [reportdata:list]
	}

	def buildContactNo(item) {
		def entity = em_entity.select('mobileno,phoneno,email').find([objid: item.taxpayerid]).first();
		def contacts = [];
		if (entity.mobileno) contacts << entity.mobileno;
		if (entity.phoneno) contacts << entity.phoneno;
		if (entity.email) contacts << entity.email;
		if (!contacts) return '';
		return contacts.join(' / ');
	}
}
