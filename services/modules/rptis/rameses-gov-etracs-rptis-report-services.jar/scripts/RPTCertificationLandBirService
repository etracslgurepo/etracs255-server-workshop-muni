import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTCertificationLandBirService 
{
    @ActiveDB('rptcertification_bir')
    def em


    @Service('RPTCertificationService')
    def certSvc 

    @Service('RPTCertificationBIRMultipleService')
    def multipleSvc 


	
    @ProxyMethod
    public void validateLandWithImprovement(params){
    	def result = em.findImprovementCount(params)
    	def bldgland = em.findBldgLandCount(params)
    	def plant = em.findPlantTreeCount(params)
    	if (result.improvcount == 0 && bldgland.improvcount == 0 && plant.improvcount == 0)
    		throw new Exception("Selected Land has no existing improvements.")
    }

    @ProxyMethod
    public def getImprovementsForBIR(entity){
    	validateAndSetParams(entity)
    	def items = em.getImprovementBirItems(entity)
    	getBirRuleApplicableProperties(entity, items)

    	if (!items){
    		throw new Exception('The property has no improvements for the year ' + entity.asofyear + ' and below.')
    	}
    	return items 
    }

    @ProxyMethod
    public void validateNoImprovements(entity){
    	validateAndSetParams(entity)
    	def items = em.getImprovementBirItems(entity)
    	getBirRuleApplicableProperties(entity, items)

    	if (items){
    		throw new Exception('The property has improvements for the year ' + entity.asofyear + ' and below.')
    	}
    }

	
	@ProxyMethod
	public def createCertification( cert ) {
		certSvc.createCertification(cert)
		cert.properties.each{
			em.createItem([objid:cert.objid, refid:it.objid])
		}
		cert.items = multipleSvc.getItems(cert)
		return openCertification(cert.objid)
	}


	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = multipleSvc.getItems(cert)
		loadFaasInfo(cert)
		return cert 
	}	

	void loadFaasInfo(cert){
		def faas = certSvc.getFaasInfo(cert.faasid)
		if (faas) {
			def certid = cert.objid
			faas.street = (faas.street ? faas.street : faas.barangay.name)
			cert.putAll( faas )
			cert.objid = certid
			if (!cert.items) {
				cert.items = []
			}
		}
		certSvc.makeHtmlSafe(cert)
	}

	void validateAndSetParams(entity){
    	def data = em.findRyForAsOfYearByFaas(entity)
    	if (!data) 
    		throw new Exception('Revision year cannot be determined for the specified As of Year.')
    	entity.ry = data.ry 
	}	

	def getBirRuleApplicableProperties(entity, items){

		//rule 1: do not include GR transactions approved on asofyear 
		def gritems = items.findAll{ it.year == entity.asofyear && it.txntype.objid == 'GR'}
		if (gritems){
			items.removeAll(gritems)
		}

		// group by pin and in case of duplicate, include only the latest year
		// this is a case where a property is processed several time before the 
		// specified as of year
		def pingroup = items.groupBy{it.fullpin}
		def improvements = []
		
		pingroup.each{k, v ->
			improvements << v.last()
		}

		return improvements 
    }	
}
