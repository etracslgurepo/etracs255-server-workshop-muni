import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTCertificationNoPropertyService 
{
    @ActiveDB('rptcertification')
    def em;

    @Service('RPTCertificationService')
    def certSvc 

    
	@ProxyMethod
	public def createCertification( cert ) {
		checkExistingProperties(cert)
		if (cert.certtype.type == 'bytaxpayers'){
			cert.taxpayer = [name:cert.requestedby, address:cert.requestedbyaddress]
		}
		cert += certSvc.createCertification(cert)
		cert.items.each{
			certSvc.createItem(it)
		}
		return openCertification(cert.objid)
	}

	@ProxyMethod
	public void checkExistingProperties( cert) {
		if (cert.certtype.type == 'bytaxpayer'){
			checkExistingProperty(cert.taxpayer.objid)
		}
		else {
			cert.items.each{
				checkExistingProperty(it.refid)
			}
		}
	}

	@ProxyMethod
	public void checkExistingProperty( taxpayerid ) {
		def props = em.getProperties([taxpayerid:taxpayerid, _limit:5])
		if (props.size() > 0){
			def msg = 'Selected taxpayer has existing '
			if (props.size() == 1){
				msg += ' property with TD No. ' + props[0].tdno + '.'
			}
			else if (props.size() <= 5){
				msg += props.size() + ' properties shown below.\n'
				props.each{ msg += '      * ' + it.tdno + '\n'}
			}
			else {
				msg += props.size() + ' properties. The first 5 properties are shown below:\n'
				props.each{ msg += '      * ' + it.tdno + '\n'}
			}

			throw new Exception(msg)
		}
	}

	@ProxyMethod
	public def openCertification(objid) {
		def cert = certSvc.openCertification(objid)
		if (! cert ) 
			throw new Exception('Certification does not exist or has already been deleted.')
		cert.items = em.getNoPropertyTaxpayers([objid:objid])
		cert.items.eachWithIndex{v, idx ->
			v.name = (idx+1) + '. ' + v.name 
		}
		return cert 
	}
}
