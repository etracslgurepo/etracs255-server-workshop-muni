import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportMgmtTxnMonitoringService
{
	@Env 
	def env 

    @ActiveDB('rptreport_mgmt')
    def em

    @Service('RPTUtil')
    def util

    @Service('DateService')
    def dtSvc 


    @Async
	@ProxyMethod
	public Map buildReport( params ) {
		util.required('LGU', params.lgu)

		params.lguid = params.lgu.objid 
		params.monthid = params.month?.index

		def items = [];

		if ('processing_summary'.equalsIgnoreCase(params.reporttype.type))
			items = em.getProcessingSummaries(params)
		else if ('txn_monitoring'.equalsIgnoreCase(params.reporttype.type))
			items = getTxnDetails(params) 
		else if ('log_report'.equalsIgnoreCase(params.reporttype.type))
			items = getReportLogs(params)

		if (!items) throw new Exception('Records not found.')

		def p = [
			PERIOD 		: "AS OF " + dtSvc.format('MMMMM dd, yyyy', dtSvc.serverDate),
			FORLGUNAME  : (params.lgu ? (env.ORGCLASS + ' OF ' + params.lgu.name) : (env.ORGCLASS + ' OF ' + env.ORGNAME)),
			LGUTYPE     : (params.lgu ? params.lgu.lgutype : env.ORGCLASS), 
		]

		return [
			parameters  : p, 
			reportdata  : items,
		]
	}


	def getTxnDetails(params){
		return em.getTxnDetails(params).each{
			it.state = it.idx.toString().padLeft(3, '0') + '.' + it.state
		}
	}


	def getReportLogs(params){
		def items = em.getReportLogs(params)
		items.each{
			it.state = it.idx.toString().padLeft(3, '0') + '.' + it.state
			it.secs = calcSeconds(it)
			it.duration = util.calcDuration(it.secs)
		}

		//add totals line 
		def grps = items.groupBy{it.objid}
		items = [] 
		grps.each{k, v ->
			if (v){
				def item = [:]
				item.putAll(v[0])
				item.state = '999.total'
				item.secs = v.secs.sum()
				item.duration = util.calcDuration(item.secs)
				v << item 
			}
			items.addAll(v)
		}
		return items.sort{a,b -> a.tdno <=> b.tdno}
	}

	def calcSeconds(item){
		Calendar startCal = Calendar.getInstance()
        Calendar endCal = Calendar.getInstance()
        
        startCal.setTime(item.startdate)
        endCal.setTime(item.enddate )
        
        int startMillis = startCal.getTimeInMillis()
        int endMillis = endCal.getTimeInMillis()
        int diff = endMillis - startMillis
        return diff.intdiv(1000)
	}

}

