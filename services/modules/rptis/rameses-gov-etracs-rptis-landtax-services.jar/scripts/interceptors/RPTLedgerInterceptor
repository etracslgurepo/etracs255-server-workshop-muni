import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTLedgerInterceptor
{
    @Env 
    def env 

    @ActiveDB('rptledger')
    def em

    @Service('RPTLedgerService')
    def svc

    @Service('Var')
    def var

    @Service('RealPropertyService')
    def rpSvc

    @Service('RPTUtil')
    def util 

    @Service('LogService')
    def logSvc

    @Service('FAASService')
    def faasSvc

    @DataContext('rptledger')
    def em_ledger

    @DataContext('rptledger_faas')
    def em_ledger_faas 

    @DataContext('rptledger_item')
    def em_ledger_item

    @DataContext('faas')
    def em_faas

    @DataContext('rptbill_ledger')
    def em_bill_ledger

    @DataContext('subdivision_subdividedland')
    def em_subdividedland

    @DataContext('faas_txntype')
    def em_faas_txntype

    @DataContext('sys_org')
    def em_org 

    def STATE_PENDING   = 'PENDING'
    def STATE_APPROVED  = 'APPROVED'


    @Before(pattern="PersistenceService.create", eval="args[0]._schemaname=='rptledger'") 
    public void createManualLedger( evt ) {
        def ledger = evt.args[0] 
        svc.validateAndBuildManualLedger(ledger)
    }

    @After(pattern="PersistenceService.read", eval="args[0]._schemaname=='rptledger'") 
    public void afterRead( evt ) {
        def ledger = evt.result
        svc.buildMessageList(ledger)
    }

    @Before(pattern="PersistenceService.removeEntity", eval="args[0]._schemaname=='rptledger'") 
    public void deleteManualLedger( evt ) {
        def ledger = evt.args[0] 
        svc.delete(ledger)
    }

    @After(pattern="FAASService.(approveFaas|approveFaasByRemote)")
    public void postFaasToRPTLedger(evt){
        def faas = evt.result 

        def posttoledger = util.toBoolean(var.post_approved_faas_to_ledger, true)
        if (!posttoledger) return

        def org = em_org.select('orgclass').find([root: 1]).first()
        if (org.orgclass.equalsIgnoreCase('PROVINCE')) {
            if (isLedgerExisting(faas)){
                svc.postLedgerFaasData(faas)
            }
        } else {
            if (util.isTrue(faas.datacapture) && hasActiveLedger(faas)) {
                svc.postLedgerFaasData(faas)
            } else if (util.isTrue(faas.datacapture)) {
                postNewLedger(faas)
            }
            else if ((faas.txntype.objid.matches('SD|CS') || isFAASFromSubdivision(faas)) && faas.rpu.rputype == 'land'){
                svc.postNewLedger(faas)
            }
            else if ((faas.txntype.objid.matches('SD|CS') || isFAASFromSubdivision(faas)) && faas.rpu.rputype != 'land'){
                svc.postLedgerFaasData(faas)
            }
            else if ( faas.txntype.newledger ) {
                postNewLedger(faas)
            }
            else {
                svc.postLedgerFaasData(faas)
            }   
        }
    }

    def hasActiveLedger(faas) {
        def prevfaas = faas.previousfaases.find{it.prevfaasid != null}
        if (prevfaas) {
            return em_ledger.select('objid').find([faasid: prevfaas.prevfaasid]).first() != null;
        }
        return false;
    }

    def isLedgerExisting(faas){
        def ledger = em_ledger.select('objid').find([faasid:faas.objid]).first() 
        if (!ledger)
            ledger = em_ledger.select('objid').find([tdno:faas.prevtdno]).first() 
        return ledger != null 
    }
    

    boolean isFAASFromSubdivision(faas){
        return em_subdividedland.select('objid').find([newfaasid:faas.objid]).first() != null
    }

    def findManualLedger(faas){
        return em_ledger.find([tdno:faas.tdno]).first()
    }

    void postNewLedger(faas){
        faas.txntype = em_faas_txntype.find([objid:faas.txntype.objid]).first()
        def manualledger = findManualLedger(faas)
        if (manualledger){
            svc.reconcileManualLedger(faas, manualledger)
        }
        else {
            svc.postNewLedger(faas)
        }
    }


    @After(pattern="FAASChangeInfoService.updateInfo", eval="#{result.action=='change_faas_appraisal'}", index=1000)
    public void updateFaasHistory(evt){
        println 'RPTLedgerInterceptor: updateFaasHistory...'
        def changeinfo = evt.result
        
        //cancel original entry and cutoff toyear and to qtr 
        def orig = em_ledger_faas.where('faasid = :faasid and state = :state', [faasid:changeinfo.faasid, state:'APPROVED']).first()
        if (!orig) return

        orig.state = 'CANCELLED'
        orig.toyear = em_faas.select('effectivityyear').find([objid:changeinfo.faasid]).first().effectivityyear
        orig.toqtr = 4
        em_ledger_faas.update(orig)

        //insert new entry with modified appraisal
        def rlf = createLedgerFaas(changeinfo, orig)
        em_ledger_faas.create(rlf)

        //reset ledger billing 
        def newrpu = changeinfo.newinfo
        def ledgerinfo = [:]
        ledgerinfo.objid = orig.rptledgerid
        ledgerinfo.nextbilldate = null 
        ledgerinfo.totalmv = newrpu.totalmv 
        ledgerinfo.totalav = newrpu.totalav 
        ledgerinfo.totalareaha = newrpu.totalareaha 
        ledgerinfo.classification = newrpu.classification 
        if (newrpu.classification?.code){
            ledgerinfo.classcode = newrpu.classification?.code 
        }
        em_ledger.update(ledgerinfo)
        em_bill_ledger.find([rptledgerid:orig.rptledgerid]).delete()
        em_ledger_item.find([parentid:orig.rptledgerid]).delete()
    }   

    @After(pattern="RuleMgmtService.deploy", index=1000)
    public void clearNextBillDate(evt){
        em_ledger.find([state:'APPROVED']).update([nextbilldate:null])
    }



    def createLedgerFaas(changeinfo, ledgerfaas){
        def newrpu = changeinfo.newinfo
        def faas = em_faas.find([objid:changeinfo.faasid]).first()

        def rlf = [:]
        rlf.objid = 'RLF' + new java.rmi.server.UID()
        rlf.state = 'APPROVED'
        rlf.rptledgerid = ledgerfaas.rptledgerid
        rlf.faasid = faas.objid 
        rlf.tdno = faas.tdno 
        rlf.txntype = faas.txntype
        rlf.classification = newrpu.classification
        rlf.actualuse = newrpu.classification
        rlf.taxable = newrpu.taxable 
        rlf.idleland = (newrpu.idleland == null ? 0 : newrpu.idleland)
        rlf.reclassed = false 
        rlf.backtax = false 
        rlf.fromyear = ledgerfaas.fromyear 
        rlf.fromqtr = ledgerfaas.fromqtr 
        rlf.toyear = 0
        rlf.toqtr = 0 
        rlf.assessedvalue = newrpu.totalav 
        rlf.systemcreated = true 
        return rlf 
    }


    @After(pattern="FAASService.revertToInterim")
    public void revertToInterim(evt){
        def faas = evt.result 
        svc.deleteFromRevertedFaas(faas)
    }

}

