import com.rameses.annotations.*
import com.rameses.services.extended.*

class RepostRealPropertTaxShareService
{
    @DataContext('cashreceipt_rpt_share_forposting_repost')
    def em_repost;

    @DataContext('rptpayment')
    def em_rptpayment;

    @DataContext('rptpayment_share')
    def em_rptpayment_share;

    @ActiveDB('landtax_repost_shares')
    def em;

    @ActiveDB(value='landtax_repost_shares_eor', adapter="eor")
    def em_eor;

    @Service('RPTUtil')
    def util;

    @Service('RPTReceiptPostShareService')
    def svc;
    
    @Async
    @ProxyMethod
    public def buildReceiptsToRepost(param) {
        def startparam = [:];
        startparam.year = param.startyear;
        startparam.month = param.startmonth;
        util.buildStartEndDateFilter(startparam);
        
        def endparam = [:];
        endparam.year = param.endyear;
        endparam.month = param.endmonth;
        util.buildStartEndDateFilter(endparam);
        
        param.startdate = startparam.startdate;
        param.enddate = endparam.enddate;

        println 'Clearing entries to repost';
        em.clearForRepostEntries(param);
        
        println 'Building ' + param.receipttype + ' receipts to repost';
        if ('ONLINE'.equalsIgnoreCase(param.receipttype)) {
            em.insertReceiptToRepost(param);
            em.deleteRptSharesToRepost(param);
            em.deleteCashReceiptSharesToRepost(param);
        } else {
            def eors = em_eor.getReceiptsToRepost(param);
            eors.each {eor ->
                def payments = em_rptpayment.select('objid,refid').find([receiptid: eor.objid]).list();
                payments.each{payment ->
                    eor.receiptid = eor.objid;
                    eor.objid = 'CRR' + new java.rmi.server.UID();
                    eor.rptpaymentid = payment.objid;
                    eor.rptledgerid = payment.refid;
                    em_repost.create(eor);
                    em_rptpayment_share.find([parentid: payment.objid]).delete();
                    em_eor.deleteEorShares(eor)
                }
            }
        }
        
        def repost = em.findRemainingCount(param);
        return (int) repost.remaining;
    }

    @ProxyMethod
    public def getReceiptsToRepost() {
        return em_repost.where('1=1').orderBy('receiptdate').list();
    }

    @ProxyMethod
    public void postShare(item) {
        svc.postShare(item);
    }


    @ProxyMethod
    public def getRemainingCount(param) {
        def progress = em.findRemainingCount(param);
        return (int) progress.remaining;
    }
}


